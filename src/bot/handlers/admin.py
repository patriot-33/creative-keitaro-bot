"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏)
"""

import logging
from typing import Dict, Any, List
import json
import os
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from core.config import settings
from db.database import get_db_session
from db.models.user import User
from sqlalchemy import select
from core.enums import UserRole

logger = logging.getLogger(__name__)
router = Router()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USERS_FILE = "users.json"
PENDING_FILE = "pending_users.json"

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_role = State()
    waiting_buyer_id = State()
    waiting_confirmation = State()

def load_users() -> Dict[int, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ int
                return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"Error loading users file: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∫ fallback
    return settings.allowed_users.copy()

def save_users(users: Dict[int, Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º int –∫–ª—é—á–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        users_str_keys = {str(k): v for k, v in users.items()}
        
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_str_keys, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"Error saving users file: {e}")
        return False

def load_pending_users() -> Dict[int, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    if os.path.exists(PENDING_FILE):
        try:
            with open(PENDING_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"Error loading pending users file: {e}")
    return {}

def save_pending_users(pending: Dict[int, Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    try:
        pending_str_keys = {str(k): v for k, v in pending.items()}
        with open(PENDING_FILE, 'w', encoding='utf-8') as f:
            json.dump(pending_str_keys, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"Error saving pending users file: {e}")
        return False

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º settings.allowed_users –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    users = settings.allowed_users
    user_info = users.get(user_id, {}) or users.get(str(user_id), {})
    role = user_info.get('role', '')
    logger.info(f"Admin check for user {user_id}: role={role}, is_admin={role in ['owner', 'head']}")
    return role in ['owner', 'head']

def can_approve_user(admin_id: int, target_role: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∞–ø—Ä—É–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = settings.allowed_users
    admin_info = users.get(admin_id, {}) or users.get(str(admin_id), {})
    admin_role = admin_info.get('role', '')
    
    # Owner –º–æ–∂–µ—Ç –∞–ø—Ä—É–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ
    if admin_role == 'owner':
        return True
    
    # Head –∏ teamlead –º–æ–≥—É—Ç –∞–ø—Ä—É–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ buyers
    if admin_role in ['head', 'teamlead'] and target_role == 'buyer':
        return True
    
    return False

def get_admin_list() -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    users = settings.allowed_users
    admins = []
    for user_id, user_info in users.items():
        if user_info.get('role') in ['owner', 'head', 'teamlead']:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º user_id –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            admin_id = int(user_id) if isinstance(user_id, str) else user_id
            admins.append(admin_id)
    return admins

async def save_user_to_database(user_id: int, user_data: dict, approved_by_id: int = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    try:
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await session.execute(select(User).where(User.tg_user_id == user_id))
            existing_user = result.scalar_one_or_none()
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user.role = UserRole(user_data['role'])
                existing_user.buyer_id = user_data.get('buyer_id')
                existing_user.tg_username = user_data.get('username', '')
                existing_user.full_name = user_data.get('first_name', '')
                existing_user.is_active = True
                if approved_by_id:
                    existing_user.created_by_id = approved_by_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    tg_user_id=user_id,
                    tg_username=user_data.get('username', ''),
                    full_name=user_data.get('first_name', ''),
                    role=UserRole(user_data['role']),
                    buyer_id=user_data.get('buyer_id') if user_data.get('buyer_id') else None,
                    is_active=True,
                    created_by_id=approved_by_id
                )
                session.add(new_user)
            
            await session.commit()
            logger.info(f"User {user_id} saved to database with role {user_data['role']}")
            return True
            
    except Exception as e:
        logger.error(f"Failed to save user {user_id} to database: {e}")
        return False

async def sync_settings_with_database():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è settings.allowed_users —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_session() as session:
            result = await session.execute(select(User).where(User.is_active == True))
            db_users = result.scalars().all()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç settings
            users = {}
            for user in db_users:
                users[user.tg_user_id] = {
                    'role': user.role.value,
                    'buyer_id': user.buyer_id or '',
                    'username': user.tg_username or '',
                    'first_name': user.full_name or '',
                    'is_approved': user.is_active
                }
            
            settings.allowed_users = users
            logger.info(f"Settings synchronized with {len(users)} users from database")
            
    except Exception as e:
        logger.error(f"Failed to sync settings with database: {e}")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    users = load_users()
    if user_id in users:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∏
    pending = load_pending_users()
    if user_id in pending:
        await message.answer(
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
    
    await state.set_state(RegistrationStates.waiting_role)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä", callback_data="reg_role_buyer")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –¢–∏–º–ª–∏–¥", callback_data="reg_role_teamlead")],
        [InlineKeyboardButton(text="üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤", callback_data="reg_role_bizdev")],
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç", callback_data="reg_role_finance")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg_cancel")]
    ])
    
    text = f"""
üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</b>

üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:</b>

‚Ä¢ <b>–ú–µ–¥–∏–∞–±–∞–µ—Ä</b> - —Ä–∞–±–æ—Ç–∞ —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫–æ–º
‚Ä¢ <b>–¢–∏–º–ª–∏–¥</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –±–∞–µ—Ä–æ–≤
‚Ä¢ <b>–ë–∏–∑–Ω–µ—Å-–¥–µ–≤</b> - —Ä–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
‚Ä¢ <b>–§–∏–Ω–∞–Ω—Å–∏—Å—Ç</b> - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("reg_role_"))
async def handle_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.replace("reg_role_", "")
    
    await state.update_data(role=role)
    
    role_names = {
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    if role == 'buyer':
        await state.set_state(RegistrationStates.waiting_buyer_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg_cancel")]
        ])
        
        text = f"""
üè∑Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Buyer ID</b>

–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role_names[role]}

üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à Buyer ID</b>

üí° –ü—Ä–∏–º–µ—Ä: <code>n1</code>, <code>kk1</code>, <code>az1</code>

‚ö†Ô∏è –≠—Ç–æ <b>–ù–ï</b> –≤–∞—à Telegram ID, –∞ ID –±–∞–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await state.set_state(RegistrationStates.waiting_confirmation)
        await state.update_data(buyer_id=None)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reg_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg_cancel")]
        ])
        
        text = f"""
‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>

üë§ <b>Telegram ID:</b> <code>{callback.from_user.id}</code>
üë§ <b>–ò–º—è:</b> {callback.from_user.first_name}
üéØ <b>–†–æ–ª—å:</b> {role_names[role]}

üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏?
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.answer()

@router.message(RegistrationStates.waiting_buyer_id)
async def handle_buyer_id_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Buyer ID"""
    buyer_id = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(buyer_id) < 1 or len(buyer_id) > 10:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Buyer ID!</b>\n\n"
            "üí° Buyer ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(buyer_id=buyer_id)
    await state.set_state(RegistrationStates.waiting_confirmation)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reg_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg_cancel")]
    ])
    
    text = f"""
‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>

üë§ <b>Telegram ID:</b> <code>{message.from_user.id}</code>
üë§ <b>–ò–º—è:</b> {message.from_user.first_name}
üéØ <b>–†–æ–ª—å:</b> üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä
üè∑Ô∏è <b>Buyer ID:</b> <code>{buyer_id}</code>

üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏?
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "reg_confirm")
async def handle_registration_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_data = await state.get_data()
    user_id = callback.from_user.id
    role = user_data.get('role')
    buyer_id = user_data.get('buyer_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    pending = load_pending_users()
    pending[user_id] = {
        'role': role,
        'buyer_id': buyer_id,
        'username': callback.from_user.username,
        'first_name': callback.from_user.first_name,
        'last_name': callback.from_user.last_name,
        'created_at': datetime.now().isoformat()
    }
    
    if save_pending_users(pending):
        await callback.message.edit_text(
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_new_request(callback.from_user, role, buyer_id)
        
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "reg_cancel")
async def handle_registration_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "üí° –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
        parse_mode="HTML"
    )
    await callback.answer()

async def notify_admins_about_new_request(user, role: str, buyer_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    bot = Bot(token=settings.telegram_bot_token)
    
    admins = get_admin_list()
    
    role_names = {
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    buyer_text = f"\nüè∑Ô∏è <b>Buyer ID:</b> <code>{buyer_id}</code>" if buyer_id else ""
    
    text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>

üë§ <b>Telegram ID:</b> <code>{user.id}</code>
üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ <b>–†–æ–ª—å:</b> {role_names.get(role, role)}{buyer_text}

üìù <b>–î–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>
/pending - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

@router.message(Command("users"))
async def cmd_users(message: Message):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    users = load_users()
    
    if not users:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    role_names = {
        'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
        'head': 'üéØ –•–µ–¥ –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞', 
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    for tg_id, user_info in users.items():
        role = user_info.get('role', 'unknown')
        buyer_id = user_info.get('buyer_id', '')
        
        role_display = role_names.get(role, f"‚ùì {role}")
        buyer_display = f" | Buyer: {buyer_id}" if buyer_id else ""
        
        text += f"‚Ä¢ <code>{tg_id}</code> - {role_display}{buyer_display}\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("add_user"))
async def cmd_add_user(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /add_user <telegram_id> <role> [buyer_id]
    –†–æ–ª–∏: owner, head, teamlead, buyer, bizdev, finance
    
    –ü—Ä–∏–º–µ—Ä: /add_user 123456789 buyer n1
    """
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /add_user
    
    if len(args) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "üìñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/add_user &lt;telegram_id&gt; &lt;role&gt; [buyer_id]</code>\n\n"
            "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            "‚Ä¢ <code>owner</code> - –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞)\n"
            "‚Ä¢ <code>head</code> - –•–µ–¥ –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞\n" 
            "‚Ä¢ <code>teamlead</code> - –¢–∏–º–ª–∏–¥\n"
            "‚Ä¢ <code>buyer</code> - –ú–µ–¥–∏–∞–±–∞–µ—Ä\n"
            "‚Ä¢ <code>bizdev</code> - –ë–∏–∑–Ω–µ—Å-–¥–µ–≤\n"
            "‚Ä¢ <code>finance</code> - –§–∏–Ω–∞–Ω—Å–∏—Å—Ç\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/add_user 123456789 buyer n1</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        tg_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    role = args[1].lower()
    valid_roles = ['owner', 'head', 'teamlead', 'buyer', 'bizdev', 'finance']
    
    if role not in valid_roles:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}\n\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(valid_roles)}"
        )
        return
    
    buyer_id = args[2] if len(args) > 2 else None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()
    
    if tg_id in users:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_user –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    
    users[tg_id] = {
        'role': role,
        'buyer_id': buyer_id
    }
    
    if save_users(users):
        role_names = {
            'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
            'head': 'üéØ –•–µ–¥ –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞',
            'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥', 
            'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
            'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
            'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
        }
        
        role_display = role_names.get(role, role)
        buyer_text = f"\nüè∑ Buyer ID: {buyer_id}" if buyer_id else ""
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üÜî Telegram ID: <code>{tg_id}</code>\n"
            f"üë§ –†–æ–ª—å: {role_display}{buyer_text}\n\n"
            f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        
        logger.info(f"User {user_id} added new user {tg_id} with role {role}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@router.message(Command("remove_user"))
async def cmd_remove_user(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /remove_user <telegram_id>
    """
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    args = message.text.split()[1:]
    
    if len(args) != 1:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "üìñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/remove_user &lt;telegram_id&gt;</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/remove_user 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        tg_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    users = load_users()
    
    if tg_id not in users:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if tg_id == user_id:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
    
    user_info = users[tg_id]
    del users[tg_id]
    
    if save_users(users):
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"üÜî Telegram ID: <code>{tg_id}</code>\n"
            f"üë§ –†–æ–ª—å –±—ã–ª–∞: {user_info.get('role', 'unknown')}\n\n"
            f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        
        logger.info(f"User {user_id} removed user {tg_id}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")

@router.message(Command("edit_user"))
async def cmd_edit_user(message: Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /edit_user <telegram_id> <role> [buyer_id]
    """
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    args = message.text.split()[1:]
    
    if len(args) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "üìñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/edit_user &lt;telegram_id&gt; &lt;role&gt; [buyer_id]</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/edit_user 123456789 teamlead</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        tg_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    role = args[1].lower()
    valid_roles = ['owner', 'head', 'teamlead', 'buyer', 'bizdev', 'finance']
    
    if role not in valid_roles:
        await message.answer(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}\n\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(valid_roles)}")
        return
    
    buyer_id = args[2] if len(args) > 2 else None
    
    users = load_users()
    
    if tg_id not in users:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_user –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    old_role = users[tg_id].get('role', 'unknown')
    old_buyer = users[tg_id].get('buyer_id', '')
    
    users[tg_id]['role'] = role
    if buyer_id is not None:
        users[tg_id]['buyer_id'] = buyer_id
    
    if save_users(users):
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üÜî Telegram ID: <code>{tg_id}</code>\n"
            f"üë§ –†–æ–ª—å: {old_role} ‚Üí {role}\n"
            f"üè∑ Buyer ID: {old_buyer or '–Ω–µ—Ç'} ‚Üí {buyer_id or '–Ω–µ—Ç'}\n\n"
            f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        
        logger.info(f"User {user_id} edited user {tg_id}: {old_role} -> {role}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")

# ===== –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù–ê =====

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    help_text = """
üîß <b>–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>

üÜï <b>–ö–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º):</b>
üîß <b>/manage_users</b> - –ö–Ω–æ–ø–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
üìù <b>/pending</b> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

‚ÑπÔ∏è <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üë• <b>/users</b> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ûï <b>/add_user &lt;id&gt; &lt;role&gt; [buyer_id]</b> - –î–æ–±–∞–≤–∏—Ç—å
‚úèÔ∏è <b>/edit_user &lt;id&gt; &lt;role&gt; [buyer_id]</b> - –ò–∑–º–µ–Ω–∏—Ç—å
‚ùå <b>/remove_user &lt;id&gt;</b> - –£–¥–∞–ª–∏—Ç—å

üîÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>
üìù <b>/register</b> - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

üîß <b>–ò–µ—Ä–∞—Ä—Ö–∏—è –ø—Ä–∞–≤:</b>
üëë <b>Owner</b> - –º–æ–∂–µ—Ç –≤—Å—ë (—Å—É–ø–µ—Ä –∞–¥–º–∏–Ω)
üéØ <b>Head/Teamlead</b> - –º–æ–≥—É—Ç –∞–ø—Ä—É–≤–∏—Ç—å/—É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–µ—Ä–æ–≤
üíº <b>Buyer</b> - –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Buyer ID

üí° <b>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</b>
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: /register
2. –ê–¥–º–∏–Ω: /pending (–∏–ª–∏ /manage_users)
3. –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å"
"""
    
    await message.answer(help_text, parse_mode="HTML")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò =====

@router.message(Command("pending"))
async def cmd_pending_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    pending = load_pending_users()
    
    if not pending:
        await message.answer("‚úÖ <b>–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!</b>", parse_mode="HTML")
        return
    
    role_names = {
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    for tg_id, user_info in pending.items():
        role = user_info.get('role', 'unknown')
        buyer_id = user_info.get('buyer_id')
        username = user_info.get('username')
        first_name = user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        created_at = user_info.get('created_at', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∞–ø—Ä—É–≤
        can_approve = can_approve_user(user_id, role)
        
        buyer_text = f"\nüè∑Ô∏è <b>Buyer ID:</b> <code>{buyer_id}</code>" if buyer_id else ""
        username_text = f"\nüìÑ <b>Username:</b> @{username}" if username else ""
        
        text = f"""
üìù <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

üë§ <b>Telegram ID:</b> <code>{tg_id}</code>
üë§ <b>–ò–º—è:</b> {first_name}{username_text}
üéØ <b>–†–æ–ª—å:</b> {role_names.get(role, role)}{buyer_text}

üó∫Ô∏è <b>–ü–æ–¥–∞–Ω–æ:</b> {created_at[:16].replace('T', ' ')}
"""
        
        if can_approve:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{tg_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tg_id}")
                ]
            ])
        else:
            text += "\n‚ö†Ô∏è <i>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–ø—Ä—É–≤ —ç—Ç–æ–π —Ä–æ–ª–∏</i>"
            keyboard = None
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("approve_"))
async def handle_approve_user(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_id = callback.from_user.id
    target_id = int(callback.data.replace("approve_", ""))
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    pending = load_pending_users()
    
    if target_id not in pending:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    user_info = pending[target_id]
    role = user_info.get('role')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_approve_user(admin_id, role):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–ø—Ä—É–≤ —ç—Ç–æ–π —Ä–æ–ª–∏!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_data = {
        'role': role,
        'buyer_id': user_info.get('buyer_id'),
        'username': user_info.get('username', ''),
        'first_name': user_info.get('first_name', ''),
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
    db_save_success = await save_user_to_database(target_id, user_data, admin_id)
    
    if db_save_success:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        users = load_users()
        users[target_id] = {
            'role': role,
            'buyer_id': user_info.get('buyer_id'),
            'approved_by': admin_id,
            'approved_at': datetime.now().isoformat()
        }
        save_users(users)  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –æ—à–∏–±–∫–µ —Ñ–∞–π–ª–∞
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        del pending[target_id]
        save_pending_users(pending)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º settings —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await sync_settings_with_database()
        
        role_names = {
            'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
            'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
            'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
            'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
        }
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
            f"üë§ <b>ID:</b> <code>{target_id}</code>\n"
            f"üéØ <b>–†–æ–ª—å:</b> {role_names.get(role, role)}\n"
            f"‚úÖ <b>–û–¥–æ–±—Ä–∏–ª:</b> {callback.from_user.first_name}",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_approved(target_id, role)
        
        logger.info(f"Admin {admin_id} approved user {target_id} with role {role} - saved to PostgreSQL")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def handle_reject_user(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_id = callback.from_user.id
    target_id = int(callback.data.replace("reject_", ""))
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    pending = load_pending_users()
    
    if target_id not in pending:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    user_info = pending[target_id]
    role = user_info.get('role')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_approve_user(admin_id, role):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —Ä–æ–ª–∏!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    del pending[target_id]
    
    if save_pending_users(pending):
        await callback.message.edit_text(
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>\n\n"
            f"üë§ <b>ID:</b> <code>{target_id}</code>\n"
            f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–∏–ª:</b> {callback.from_user.first_name}",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_rejected(target_id)
        
        logger.info(f"Admin {admin_id} rejected user {target_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!", show_alert=True)
    
    await callback.answer()

async def notify_user_approved(user_id: int, role: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
    bot = Bot(token=settings.telegram_bot_token)
    
    role_names = {
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    text = f"""
‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>

üéØ <b>–†–æ–ª—å:</b> {role_names.get(role, role)}

üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!

üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
"""
    
    try:
        await bot.send_message(user_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about approval: {e}")

async def notify_user_rejected(user_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    bot = Bot(token=settings.telegram_bot_token)
    
    text = f"""
‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

üìù –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register
"""
    
    try:
        await bot.send_message(user_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about rejection: {e}")

@router.message(Command("reload_users"))
async def cmd_reload_users(message: Message):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        users = load_users()
        settings.allowed_users = users
        
        await message.answer(
            f"‚úÖ <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
            f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {USERS_FILE if os.path.exists(USERS_FILE) else '–∫–æ–Ω—Ñ–∏–≥'}"
        )
        
        logger.info(f"User {user_id} reloaded users list")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        logger.error(f"Error reloading users: {e}")

# ===== –ö–ù–û–ü–û–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

@router.message(Command("manage_users"))
async def cmd_manage_users(message: Message):
    """–ö–Ω–æ–ø–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users = load_users()
    pending = load_pending_users()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"üìù –ó–∞—è–≤–∫–∏ ({len(pending)})", callback_data="btn_pending"),
            InlineKeyboardButton(text=f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)})", callback_data="btn_users_list")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="btn_add_user"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_refresh_manage")
        ]
    ])
    
    text = f"""
üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {len(pending)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "btn_pending")
async def handle_btn_pending(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É pending
    fake_message = type('obj', (object,), {
        'from_user': callback.from_user,
        'answer': callback.message.answer
    })
    await cmd_pending_users(fake_message)

@router.callback_query(F.data == "btn_users_list")
async def handle_btn_users_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    users = load_users()
    
    if not users:
        await callback.message.edit_text("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    role_names = {
        'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
        'head': 'üéØ –•–µ–¥ –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
    sorted_users = sorted(users.items(), key=lambda x: ['owner', 'head', 'teamlead', 'buyer', 'bizdev', 'finance'].index(x[1].get('role', 'buyer')))
    
    keyboards = []
    
    for tg_id, user_info in sorted_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        role = user_info.get('role', 'unknown')
        buyer_id = user_info.get('buyer_id', '')
        
        role_display = role_names.get(role, f"‚ùì {role}")
        buyer_display = f" | {buyer_id}" if buyer_id else ""
        
        text += f"‚Ä¢ <code>{tg_id}</code> - {role_display}{buyer_display}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        can_delete = can_delete_user(user_id, role, tg_id)
        
        if can_delete:
            keyboards.append([
                InlineKeyboardButton(
                    text=f"‚ùå {tg_id}{'|' + buyer_id if buyer_id else ''}",
                    callback_data=f"delete_user_{tg_id}"
                )
            ])
    
    if len(users) > 10:
        text += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    keyboards.append([
        InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="btn_refresh_manage")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboards)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("delete_user_"))
async def handle_delete_user_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    admin_id = callback.from_user.id
    target_id = int(callback.data.replace("delete_user_", ""))
    
    users = load_users()
    
    if target_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    user_info = users[target_id]
    role = user_info.get('role')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_delete_user(admin_id, role, target_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{target_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="btn_users_list")
        ]
    ])
    
    role_names = {
        'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
        'head': 'üéØ –•–µ–¥',
        'teamlead': 'üë®‚Äçüíº –¢–∏–º–ª–∏–¥',
        'buyer': 'üíº –ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'bizdev': 'üìà –ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    buyer_text = f"\nüè∑Ô∏è <b>Buyer ID:</b> {user_info.get('buyer_id')}" if user_info.get('buyer_id') else ""
    
    text = f"""
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>

üë§ <b>ID:</b> <code>{target_id}</code>
üéØ <b>–†–æ–ª—å:</b> {role_names.get(role, role)}{buyer_text}

‚ùå <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def handle_confirm_delete_user(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
    admin_id = callback.from_user.id
    target_id = int(callback.data.replace("confirm_delete_", ""))
    
    users = load_users()
    
    if target_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    user_info = users[target_id]
    role = user_info.get('role')
    
    if not can_delete_user(admin_id, role, target_id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º
    del users[target_id]
    
    if save_users(users):
        settings.allowed_users = users
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>ID:</b> <code>{target_id}</code>\n"
            f"‚ùå <b>–£–¥–∞–ª–∏–ª:</b> {callback.from_user.first_name}",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_deleted(target_id)
        
        logger.info(f"Admin {admin_id} deleted user {target_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "btn_refresh_manage")
async def handle_btn_refresh_manage(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.answer()
    fake_message = type('obj', (object,), {
        'from_user': callback.from_user,
        'answer': callback.message.edit_text
    })
    await cmd_manage_users(fake_message)

def can_delete_user(admin_id: int, target_role: str, target_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    admin_info = users.get(admin_id, {})
    admin_role = admin_info.get('role', '')
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if admin_id == target_id:
        return False
    
    # Owner –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ (–∫—Ä–æ–º–µ —Å–µ–±—è)
    if admin_role == 'owner':
        return True
    
    # Head –∏ teamlead –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ buyers
    if admin_role in ['head', 'teamlead'] and target_role == 'buyer':
        return True
    
    return False

async def notify_user_deleted(user_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏"""
    bot = Bot(token=settings.telegram_bot_token)
    
    text = """
‚ùå <b>–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>

–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.

üìû –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    try:
        await bot.send_message(user_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about deletion: {e}")