"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
"""

import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.keyboards.reports import ReportsKeyboards
from bot.services.reports import ReportsService
from core.config import settings
from core.enums import ReportPeriod

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Log module loading
logger.info("="*60)
logger.info("REPORTS MODULE LOADED")
logger.info("="*60)

router = Router()

# Log router creation
logger.info("Reports router created and ready for registration")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReportsStates(StatesGroup):
    main_menu = State()
    traffic_source_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    period_selection = State()
    filters_selection = State()
    report_display = State()
    export_type_selection = State()
    export_period_selection = State()
    export_processing = State()


@router.message(Command("reports"))
async def cmd_reports(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–æ–≤"""
    logger.warning(f"====== /REPORTS HANDLER TRIGGERED ======")
    logger.warning(f"User ID: {message.from_user.id}")
    logger.warning(f"Username: {message.from_user.username}")
    logger.warning(f"Message text: '{message.text}'")
    logger.warning(f"Chat ID: {message.chat.id}")
    
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    allowed_users = settings.allowed_users
    logger.info(f"Getting allowed users from settings...")
    logger.info(f"Allowed users keys: {list(allowed_users.keys())}")
    
    user_info = allowed_users.get(user.id) or allowed_users.get(str(user.id))
    
    logger.info(f"Reports access check for user {user.id}: user_info={user_info}")
    
    if not user_info:
        logger.warning(f"Access denied for user {user.id}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç–∞–º.")
        return
    
    logger.info(f"Access granted for user {user.id}, role: {user_info.get('role', 'unknown')}")
    
    await state.set_state(ReportsStates.main_menu)
    
    keyboard = ReportsKeyboards.main_reports_menu()
    logger.info("Reports menu keyboard created")
    
    welcome_text = f"""
üìä <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:

‚Ä¢ <b>Dashboard –°–≤–æ–¥–∫–∞</b> - –æ–±—â–∏–π –æ–±–∑–æ—Ä –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b> - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–¥–∏–∞–±–∞–µ—Ä–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b> - –∞–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b> - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–æ–≤  
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
"""
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    logger.info(f"User {user.id} opened reports system")
    logger.warning(f"====== /REPORTS HANDLER COMPLETED SUCCESSFULLY ======")


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –û–¢–ß–ï–¢–û–í =====

@router.callback_query(F.data == "reports_main")
async def handle_reports_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await state.set_state(ReportsStates.main_menu)
    
    keyboard = ReportsKeyboards.main_reports_menu()
    
    text = """
üìä <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== DASHBOARD –°–í–û–î–ö–ê =====

@router.callback_query(F.data == "reports_dashboard")
async def handle_dashboard_report(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Dashboard —Å–≤–æ–¥–∫–∏"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="dashboard")
    
    keyboard = ReportsKeyboards.traffic_source_selection("dashboard")
    
    text = """
üìä <b>Dashboard –°–≤–æ–¥–∫–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –í–´–ë–û–† –ò–°–¢–û–ß–ù–ò–ö–ê –¢–†–ê–§–ò–ö–ê =====

@router.callback_query(F.data.startswith("trafficsrc_"))
async def handle_traffic_source_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    parts = callback.data.split("_")
    
    if len(parts) == 2:
        # –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (trafficsrc_dashboard)
        report_type = parts[1]
        await state.set_state(ReportsStates.traffic_source_selection)
        
        keyboard = ReportsKeyboards.traffic_source_selection(report_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report_names = {
            "dashboard": "Dashboard –°–≤–æ–¥–∫–∞",
            "buyers": "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º",
            "geo": "–û—Ç—á–µ—Ç –ø–æ –ì–ï–û",
            "creatives": "–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º",
            "offers": "–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"
        }
        report_display = report_names.get(report_type, report_type)
        
        text = f"""
üìä <b>{report_display}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        return
    
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    report_type = parts[1]  # dashboard, buyers, geo, etc.
    traffic_source = parts[2]  # google, fb
    
    await state.set_state(ReportsStates.period_selection)
    await state.update_data(report_type=report_type, traffic_source=traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    report_names = {
        "dashboard": "Dashboard –°–≤–æ–¥–∫–∞",
        "buyers": "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º",
        "geo": "–û—Ç—á–µ—Ç –ø–æ –ì–ï–û",
        "creatives": "–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º",
        "offers": "–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"
    }
    report_display = report_names.get(report_type, report_type)
    
    keyboard = ReportsKeyboards.period_selection(report_type, traffic_source)
    
    text = f"""
üìä <b>{report_display} ({source_display})</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("period_dashboard_"))
async def handle_dashboard_period(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ Dashboard —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"Dashboard callback data: {callback.data}")
    callback_parts = callback.data.replace("period_dashboard_", "").split("_")
    logger.info(f"Parsed callback parts: {callback_parts}")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞), —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ (—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º)
    if len(callback_parts) >= 2:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: period_dashboard_google_yesterday –∏–ª–∏ period_dashboard_fb_today
        traffic_source = callback_parts[0]
        period = callback_parts[1]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è traffic_source
        if traffic_source not in ["google", "fb"]:
            logger.warning(f"Invalid traffic_source: {traffic_source}, falling back to None")
            traffic_source = None
        
        await state.update_data(traffic_source=traffic_source)
        logger.info(f"New format - traffic_source: {traffic_source}, period: {period}")
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: period_dashboard_yesterday
        period = callback_parts[0]
        traffic_source = None
        logger.info(f"Old format - period: {period}, traffic_source: None")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    valid_periods = ["today", "yesterday", "last3days", "last7days", "last15days", "thismonth", "lastmonth"]
    if period not in valid_periods:
        logger.warning(f"Invalid period: {period}, falling back to yesterday")
        period = "yesterday"
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(report_type="dashboard", period=period)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞"
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Dashboard —Å–≤–æ–¥–∫—É...")
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        reports_service = ReportsService()
        user_data = await state.get_data()
        traffic_source = user_data.get("traffic_source")
        
        logger.info(f"Processing dashboard: period={period}, traffic_source={traffic_source}")
        
        dashboard_data = await reports_service.get_dashboard_summary(period, traffic_source)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"Dashboard data received: {dashboard_data}")
        
        if not dashboard_data:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Dashboard")
            return
        
        totals = dashboard_data.get('totals', {})
        logger.info(f"Totals: clicks={totals.get('clicks', 0)}, leads={totals.get('leads', 0)}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = format_dashboard_report(dashboard_data, period, traffic_source)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = ReportsKeyboards.report_actions("dashboard", {"period": period})
        
        await callback.message.edit_text(
            report_text, 
            reply_markup=keyboard, 
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error generating dashboard report: {e}")
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        if "Broken pipe" in str(e) or "Connection" in str(e):
            error_message += "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É Keitaro.\n"
            error_message += "‚è±Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥.\n\n"
        elif "timeout" in str(e).lower():
            error_message += "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.\n"
            error_message += "üìä –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥.\n\n"
        else:
            error_message += f"üêõ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
        
        error_message += "üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
        error_message += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥\n"
        error_message += "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥\n"
        error_message += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        
        keyboard = ReportsKeyboards.period_selection("dashboard", None, "reports_main")
        
        await callback.message.edit_text(
            error_message,
            reply_markup=keyboard
        )


# ===== –û–¢–ß–ï–¢–´ –ü–û –ë–ê–ô–ï–†–ê–ú =====

@router.callback_query(F.data == "reports_buyers")
async def handle_buyers_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="buyers")
    
    keyboard = ReportsKeyboards.traffic_source_selection("buyers")
    
    text = """
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("period_buyers_"))
async def handle_buyers_period(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    callback_parts = callback.data.replace("period_buyers_", "").split("_")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
    if len(callback_parts) >= 2:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: period_buyers_google_yesterday
        traffic_source = callback_parts[0]
        period = callback_parts[1]
        await state.update_data(traffic_source=traffic_source)
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: period_buyers_yesterday
        period = callback_parts[0]
        traffic_source = None
    
    await state.set_state(ReportsStates.filters_selection)
    await state.update_data(report_type="buyers", period=period)
    
    user_data = await state.get_data()
    traffic_source = user_data.get("traffic_source")
    
    keyboard = ReportsKeyboards.buyers_filters(period, traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, "") if traffic_source else ""
    title_suffix = f" ({source_display})" if source_display else ""
    
    text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º{title_suffix}</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("buyers_all_"))
async def handle_buyers_all_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º"""
    parts = callback.data.split("_")
    period = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    user_data = await state.get_data()
    traffic_source = user_data.get("traffic_source")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "all", "period": period})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    traffic_label = ""
    if traffic_source == "google":
        traffic_label = " (Google)"
    elif traffic_source == "fb":
        traffic_label = " (FB)"
    
    await callback.message.edit_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º{traffic_label}...")
    await callback.answer()
    
    try:
        reports_service = ReportsService()
        buyers_data = await reports_service.get_buyers_report(period, "all", None, traffic_source)
        
        report_text = format_buyers_report(buyers_data, "all", period, traffic_source)
        keyboard = ReportsKeyboards.report_actions("buyers", {"type": "all", "period": period})
        
        await callback.message.edit_text(
            report_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in buyers report: {e}")
        
        error_message = "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ –±–∞–π–µ—Ä–∞–º\n\n"
        
        if "Broken pipe" in str(e) or "Connection" in str(e):
            error_message += "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Keitaro.\n"
            error_message += "‚è±Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥."
        else:
            error_message += f"üêõ –û—à–∏–±–∫–∞: {str(e)[:100]}"
        
        keyboard = ReportsKeyboards.buyers_filters(period)
        
        await callback.message.edit_text(
            error_message,
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("buyers_select_"))
async def handle_buyers_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞"""
    period = callback.data.replace("buyers_select_", "")
    
    await state.set_state(ReportsStates.filters_selection)
    await state.update_data(report_type="buyers", period=period, filter_type="select")
    
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤...")
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        reports_service = ReportsService()
        user_data = await state.get_data()
        traffic_source = user_data.get("traffic_source")
        buyers_data = await reports_service.get_buyers_report(period, "all", None, traffic_source)
        
        if not buyers_data:
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=ReportsKeyboards.buyers_filters(period)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–π–µ—Ä–∞–º–∏
        keyboard_buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–π–µ—Ä–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buyers_data), 2):
            row = []
            for buyer in buyers_data[i:i+2]:
                buyer_id = buyer.get('buyer_id', 'unknown')
                revenue = buyer.get('revenue', 0)
                leads = buyer.get('leads', 0)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"üë§ {buyer_id} | ${revenue:.0f} | {leads} —Ä–µ–≥"
                callback_data = f"buyer_{buyer_id}_{period}"
                
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data
                ))
            keyboard_buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        user_data = await state.get_data()
        if user_data.get('traffic_source'):
            back_callback = f"period_buyers_{user_data['traffic_source']}_{period}"
        else:
            back_callback = f"period_buyers_{period}"
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data=back_callback)
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        text = f"""
üë• <b>–í—ã–±–æ—Ä –±–∞–π–µ—Ä–∞</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:</b>

üìä –§–æ—Ä–º–∞—Ç: –ë–∞–π–µ—Ä | –î–æ—Ö–æ–¥ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error loading buyers list: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–∞–π–µ—Ä–æ–≤.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReportsKeyboards.buyers_filters(period)
        )

@router.callback_query(F.data.startswith("buyer_") & F.data.contains("_"))
async def handle_individual_buyer_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–∞–π–µ—Ä—É"""
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
        
    buyer_id = parts[1]
    period = parts[2]
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "individual", "buyer_id": buyer_id, "period": period})
    
    await callback.message.edit_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É {buyer_id}...")
    await callback.answer()
    
    try:
        reports_service = ReportsService()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω–æ–≥–æ
        all_buyers_data = await reports_service.get_buyers_report(period, "all")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞
        buyer_data = None
        for buyer in all_buyers_data:
            if buyer.get('buyer_id') == buyer_id:
                buyer_data = buyer
                break
        
        if not buyer_data:
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä—É {buyer_id} –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}\n\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω–æ, —É –±–∞–π–µ—Ä–∞ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                reply_markup=ReportsKeyboards.buyers_filters(period)
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞
        text = format_individual_buyer_report(buyer_data, buyer_id, period)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard_buttons = [
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"buyer_{buyer_id}_{period}"),
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="reports_buyers")
            ],
            [
                InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –±–∞–π–µ—Ä–æ–≤", callback_data=f"buyers_select_{period}")
            ],
            [
                InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤", callback_data="reports_main")
            ]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in individual buyer report: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä—É {buyer_id}.\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReportsKeyboards.buyers_filters(period)
        )

@router.callback_query(F.data.startswith("buyers_traffic_"))
async def handle_buyers_traffic_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É (–±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –±–∞–π–µ—Ä–∞–º)"""
    period = callback.data.replace("buyers_traffic_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "traffic", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buyers_geo_"))
async def handle_buyers_geo_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –±–∞–π–µ—Ä–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ì–ï–û"""
    period = callback.data.replace("buyers_geo_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "geo", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º –∏ –ì–ï–û...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ì–ï–û –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buyers_offers_"))
async def handle_buyers_offers_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –±–∞–π–µ—Ä–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    period = callback.data.replace("buyers_offers_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "offers", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º –∏ –æ—Ñ—Ñ–µ—Ä–∞–º...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )


# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

@router.message(Command("stats_creo"))
async def cmd_stats_creo(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—Ä–µ–∞—Ç–∏–≤—É"""
    from bot.services.creatives import CreativesService
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
    command_parts = message.text.split()
    
    if len(command_parts) == 1:
        # ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"
            "<code>/stats_creo IDAZ090825001</code>\n\n"
            "–§–æ—Ä–º–∞—Ç ID: IDGEO–î–î–ú–ú–ì–ìNNN\n"
            "‚Ä¢ ID - –ø—Ä–µ—Ñ–∏–∫—Å\n"
            "‚Ä¢ GEO - —Å—Ç—Ä–∞–Ω–∞ (AZ, TR, US, –∏ —Ç.–¥.)\n"
            "‚Ä¢ –î–î–ú–ú–ì–ì - –¥–∞—Ç–∞\n"
            "‚Ä¢ NNN - –Ω–æ–º–µ—Ä",
            parse_mode="HTML"
        )
        return
    
    creative_id = command_parts[1].upper()
    
    # –ò—â–µ–º –∫—Ä–µ–∞—Ç–∏–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    creative = await CreativesService.get_creative_by_id(creative_id)
    
    if not creative:
        await message.answer(
            f"‚ùå <b>–ö—Ä–µ–∞—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            f"–ö—Ä–µ–∞—Ç–∏–≤ —Å ID <code>{creative_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_creos –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–∞—Ç–∏–≤–µ
    response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞</b>\n\n"
    response += CreativesService.format_creative_info(creative)
    response += "\nüöß <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–º/–∫–æ–Ω–≤–µ—Ä—Å–∏—è–º</b>\n"
    response += "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π Keitaro –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
    
    await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)


@router.message(Command("stats_geo_offer"))
async def cmd_stats_geo_offer(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ GEO –∏ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    await message.answer(
        "üåç <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GEO/–æ—Ñ—Ñ–µ—Ä–æ–≤</b>\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ:\n"
        "‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º —Ä–µ–≥–∏–æ–Ω–∞–º\n"
        "‚Ä¢ –û—Ñ—Ñ–µ—Ä–∞–º –∏ –∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–∏\n"
        "‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
        parse_mode="HTML"
    )


@router.message(Command("my_creos"))
async def cmd_my_creos(message: Message):
    """–ú–æ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã"""
    from bot.services.creatives import CreativesService
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    creatives = await CreativesService.get_user_creatives(user_id, limit=10)
    total_count = await CreativesService.count_user_creatives(user_id)
    
    if not creatives:
        await message.answer(
            "üé® <b>–ú–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞!",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üé® <b>–ú–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã</b> (–ø–æ–∫–∞–∑–∞–Ω–æ {len(creatives)} –∏–∑ {total_count})\n\n"
    
    for creative in creatives:
        response += CreativesService.format_creative_info(creative)
        response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    if total_count > 10:
        response += f"\nüìÑ –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏–∑ {total_count} –≤—Å–µ–≥–æ"
    
    await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)


@router.message(lambda message: message.text and message.text.startswith("/get_"))
async def handle_get_creative(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞ –ø–æ ID"""
    from bot.services.creatives import CreativesService
    from integrations.telegram.storage import TelegramStorageService
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º creative_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    creative_id = message.text.replace("/get_", "").upper()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤ –∏–∑ –ë–î
    creative = await CreativesService.get_creative_by_id(creative_id)
    
    if not creative:
        await message.answer(
            f"‚ùå –ö—Ä–µ–∞—Ç–∏–≤ —Å ID <code>{creative_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_creos –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–∫—Ä–µ–∞—Ç–∏–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞)
    user_id = message.from_user.id
    if creative.uploader.tg_user_id != user_id:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—Ä–µ–∞—Ç–∏–≤—É.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫—Ä–µ–∞—Ç–∏–≤–∞ –µ—Å—Ç—å Telegram file_id
    if not creative.telegram_file_id or creative.telegram_file_id.startswith('temp_'):
        await message.answer(
            f"‚ùå –§–∞–π–ª –∫—Ä–µ–∞—Ç–∏–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            f"–≠—Ç–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ Telegram —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        caption = f"""üé® <b>{creative.creative_id}</b>
üåç GEO: {creative.geo}
üìù –§–∞–π–ª: {creative.original_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä –†–∞–∑–º–µ—Ä: {round(creative.size_bytes / (1024 * 1024), 1) if creative.size_bytes else 0} MB
üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {creative.upload_dt.strftime("%d.%m.%Y %H:%M") if creative.upload_dt else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"""
        
        if creative.notes:
            caption += f"\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {creative.notes}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è telegram_file_id
        await message.answer_document(
            document=creative.telegram_file_id,
            caption=caption,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error sending creative file: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.message(Command("stats_buyer"))
async def cmd_stats_buyer(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    await message.answer(
        "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–π–µ—Ä–æ–≤</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reports –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –±–∞–π–µ—Ä–∞–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n"
        "‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
        parse_mode="HTML"
    )


@router.message(Command("export"))
async def cmd_export(message: Message, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã"""
    await state.set_state(ReportsStates.export_type_selection)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ö—Ä–µ–∞—Ç–∏–≤—ã", callback_data="export_creatives")],
        [InlineKeyboardButton(text="üë• –ë–∞–π–µ—Ä—ã", callback_data="export_buyers")],
        [InlineKeyboardButton(text="üåç –ì–ï–û", callback_data="export_geo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reports_cancel")]
    ])
    
    text = """
üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Google –¢–∞–±–ª–∏—Ü—ã</b>

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:</b>

üìä <b>–ö—Ä–µ–∞—Ç–∏–≤—ã</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
üë• <b>–ë–∞–π–µ—Ä—ã</b> - –æ—Ç—á–µ—Ç –ø–æ –º–µ–¥–∏–∞–±–∞–µ—Ä–∞–º —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
üåç <b>–ì–ï–û</b> - –∞–Ω–∞–ª–∏–∑ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º —Ä–µ–≥–∏–æ–Ω–∞–º

üí° <b>–û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</b>
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# ===== –û–¢–ß–ï–¢–´ –ü–û –ö–†–ï–ê–¢–ò–í–ê–ú (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ) =====

@router.callback_query(F.data.startswith("period_creatives_"))
async def handle_creatives_period_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    logger.info(f"=== CALLBACK PARSING DEBUG ===")
    logger.info(f"Raw callback data: {callback.data}")
    
    parts = callback.data.split("_")
    logger.info(f"Split parts: {parts}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
    # –§–æ—Ä–º–∞—Ç: period_creatives_fb_yesterday –∏–ª–∏ period_creatives_yesterday
    if len(parts) >= 4:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: period_creatives_traffic_source_period
        traffic_source = parts[2]
        period = parts[3]
        logger.info(f"4+ parts format: traffic_source={traffic_source}, period={period}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è traffic_source
        if traffic_source not in ["google", "fb"]:
            logger.warning(f"Invalid traffic_source in creatives: {traffic_source}, falling back to None")
            traffic_source = None
            period = parts[2]  # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø–µ—Ä–∏–æ–¥
            logger.info(f"After validation: traffic_source={traffic_source}, period={period}")
    elif len(parts) >= 3:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: period_creatives_period
        period = parts[2]
        traffic_source = None
        logger.info(f"3 parts format: traffic_source=None, period={period}")
    else:
        logger.error(f"Invalid callback format: {callback.data}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    valid_periods = ["today", "yesterday", "last3days", "last7days", "last15days", "thismonth", "lastmonth"]
    if period not in valid_periods:
        logger.warning(f"Invalid period in creatives: {period}, falling back to yesterday")
        period = "yesterday"
    
    logger.info(f"Final parsed values: traffic_source={traffic_source}, period={period}")
    
    await state.set_state(ReportsStates.filters_selection)
    await state.update_data(
        report_type="creatives", 
        period=period, 
        traffic_source=traffic_source
    )
    
    # CRITICAL DEBUG: Verify period was saved
    debug_data = await state.get_data()
    logger.info(f"PERIOD SAVE CHECK - Data after update: {debug_data}")
    logger.info(f"PERIOD SAVE CHECK - Period value: {debug_data.get('period', 'MISSING!')}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–π–µ—Ä–∞
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üìä –ü–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º",
            callback_data=f"creo_buyer_all_{period}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –±–∞–π–µ—Ä–∞"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üë§ –í—ã–±—Ä–∞—Ç—å –±–∞–π–µ—Ä–∞",
            callback_data=f"creo_buyer_select_{period}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if traffic_source:
        back_callback = f"trafficsrc_creatives_{traffic_source}"
    else:
        back_callback = "trafficsrc_creatives"
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = f"""
üé® <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–∞–π–µ—Ä–∞–º:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("creo_buyer_"))
async def handle_creatives_buyer_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–π–µ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    parts = callback.data.split("_")
    
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    action = parts[2]  # all –∏–ª–∏ select
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback, —Ç.–∫. FSM state —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    if len(parts) >= 4:
        period = parts[3]  # –ü–µ—Ä–∏–æ–¥ –∏–∑ callback
        logger.info(f"Period from callback: {period}")
    else:
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–∏–æ–¥ –≤ callback data
        callback_str = callback.data
        period_match = None
        valid_periods = ["today", "yesterday", "last3days", "last7days", "last15days", "thismonth", "lastmonth"]
        for p in valid_periods:
            if p in callback_str:
                period_match = p
                break
        period = period_match or "yesterday"
        logger.info(f"Period extracted from callback string: {period}")
    
    logger.info(f"creo_buyer handler: action={action}, period={period}, callback={callback.data}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await state.update_data(period=period)
    
    if action == "select":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤...")
        
        try:
            reports_service = ReportsService()
            user_data = await state.get_data()
            traffic_source = user_data.get("traffic_source")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤
            buyers_data = await reports_service.get_buyers_report(period, "all", None, traffic_source)
            
            if not buyers_data:
                # –ü–æ–ª—É—á–∞–µ–º traffic_source –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ callback
                user_data = await state.get_data()
                traffic_source = user_data.get("traffic_source")
                if traffic_source:
                    back_callback = f"period_creatives_{traffic_source}_{period}"
                else:
                    back_callback = f"period_creatives_{period}"
                    
                await callback.message.edit_text(
                    f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
                    ]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–π–µ—Ä–∞–º–∏
            keyboard_buttons = []
            
            for i in range(0, len(buyers_data), 2):
                row = []
                for buyer in buyers_data[i:i+2]:
                    buyer_id = buyer.get('buyer_id', 'unknown')
                    row.append(InlineKeyboardButton(
                        text=f"üë§ {buyer_id}",
                        callback_data=f"creo_setbuyer_{buyer_id}_{period}"
                    ))
                keyboard_buttons.append(row)
            
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"period_creatives_{period}")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                f"üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞</b>\nüìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error loading buyers for creatives: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–∞–π–µ—Ä–æ–≤")
    
    else:
        # all - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–µ–æ
        await state.update_data(buyer_id="all")
        await show_creatives_geo_selection(callback, state, period)


@router.callback_query(F.data.startswith("creo_setbuyer_"))
async def handle_creatives_set_buyer(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥–µ–æ"""
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    buyer_id = parts[2]
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ state, –∞ –Ω–µ –∏–∑ callback
    user_data = await state.get_data()
    period = user_data.get("period", "yesterday")
    
    logger.info(f"creo_setbuyer handler: buyer_id={buyer_id}, period_from_state={period}, callback={callback.data}")
    
    await state.update_data(buyer_id=buyer_id)
    await show_creatives_geo_selection(callback, state, period)


async def show_creatives_geo_selection(callback: CallbackQuery, state: FSMContext, period: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–µ–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    user_data = await state.get_data()
    buyer_id = user_data.get("buyer_id", "all")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ–æ
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –≥–µ–æ"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üåç –í—Å–µ –≥–µ–æ",
            callback_data=f"creo_geo_all_{period}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≥–µ–æ"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üìç –í—ã–±—Ä–∞—Ç—å –≥–µ–æ",
            callback_data=f"creo_geo_select_{period}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"period_creatives_{period}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = f"""
üé® <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}
üë§ –ë–∞–π–µ—Ä: {buyer_id}

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–µ–æ:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("creo_geo_"))
async def handle_creatives_geo_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    action = parts[2]  # all –∏–ª–∏ select
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback –∏–ª–∏ state
    if len(parts) >= 4:
        period = parts[3]  # –ü–µ—Ä–∏–æ–¥ –∏–∑ callback
        logger.info(f"Period from callback: {period}")
    else:
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ state (–µ—Å–ª–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ)
        user_data = await state.get_data()
        period = user_data.get("period", "yesterday")
        logger.info(f"Period from state fallback: {period}")
    
    logger.info(f"creo_geo handler: action={action}, period={period}, callback={callback.data}")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ state
    await state.update_data(period=period)
    
    if action == "select":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–µ–æ
        geos = ["AT", "AZ", "BE", "BG", "CH", "CZ", "DE", "ES", "FR", "HR", 
                "HU", "IT", "NL", "PL", "RO", "SI", "SK", "TR", "UK", "US"]
        
        keyboard_buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–µ–æ –ø–æ 4 –≤ —Ä—è–¥
        for i in range(0, len(geos), 4):
            row = []
            for geo in geos[i:i+4]:
                row.append(InlineKeyboardButton(
                    text=f"üåç {geo}",
                    callback_data=f"creo_setgeo_{geo}_{period}"
                ))
            keyboard_buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        user_data = await state.get_data()
        buyer_id = user_data.get("buyer_id", "all")
        if buyer_id == "all":
            back_callback = f"creo_buyer_all_{period}"
        else:
            back_callback = f"creo_setbuyer_{buyer_id}_{period}"
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ</b>\nüìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    else:
        # all - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        await state.update_data(geo="all")
        await show_creatives_metric_selection(callback, state, period)


@router.callback_query(F.data.startswith("creo_setgeo_"))
async def handle_creatives_set_geo(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–µ–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫–∏"""
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    geo = parts[2]
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ state, –∞ –Ω–µ –∏–∑ callback
    user_data = await state.get_data()
    period = user_data.get("period", "yesterday")
    
    logger.info(f"creo_setgeo handler: geo={geo}, period_from_state={period}, callback={callback.data}")
    
    await state.update_data(geo=geo)
    await show_creatives_metric_selection(callback, state, period)


async def show_creatives_metric_selection(callback: CallbackQuery, state: FSMContext, period: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"""
    user_data = await state.get_data()
    buyer_id = user_data.get("buyer_id", "all")
    geo = user_data.get("geo", "all")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üí∞ –õ—É—á—à–∏–µ –ø–æ uEPC",
            callback_data=f"creo_show_uepc_{period}"
        )
    ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üíµ –õ—É—á—à–∏–µ –ø–æ –¥–æ—Ö–æ–¥—É",
            callback_data=f"creo_show_revenue_{period}"
        )
    ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üìÖ –õ—É—á—à–∏–µ –ø–æ —Å—Ä–æ–∫—É –∂–∏–∑–Ω–∏",
            callback_data=f"creo_show_active_{period}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if geo == "all":
        back_callback = f"creo_geo_all_{period}"
    else:
        back_callback = f"creo_setgeo_{geo}_{period}"
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = f"""
üé® <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}
üë§ –ë–∞–π–µ—Ä: {buyer_id}
üåç –ì–µ–æ: {geo}

–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("creo_show_"))
async def handle_creatives_show_report(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    parts = callback.data.split("_")
    
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    metric = parts[2]  # uepc, revenue, active
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback
    if len(parts) >= 4:
        period = parts[3]  # –ü–µ—Ä–∏–æ–¥ –∏–∑ callback
        logger.info(f"Period from callback: {period}")
    else:
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–∏–æ–¥ –≤ callback data –∏–ª–∏ state
        callback_str = callback.data
        period_match = None
        valid_periods = ["today", "yesterday", "last3days", "last7days", "last15days", "thismonth", "lastmonth"]
        for p in valid_periods:
            if p in callback_str:
                period_match = p
                break
        
        if period_match:
            period = period_match
            logger.info(f"Period extracted from callback string: {period}")
        else:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏–∑ state
            user_data = await state.get_data()
            period = user_data.get("period", "yesterday")
            logger.info(f"Period from state fallback: {period}")
    
    logger.info(f"creo_show handler: metric={metric}, period={period}, callback={callback.data}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await state.update_data(current_metric=metric)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    await show_creatives_report(callback, state, period, metric)


async def show_creatives_report(callback: CallbackQuery, state: FSMContext, period: str, sort_by: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º...")
    await callback.answer()
    
    try:
        user_data = await state.get_data()
        buyer_id = user_data.get("buyer_id", "all")
        geo = user_data.get("geo", "all")
        traffic_source = user_data.get("traffic_source")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"=== CREATIVES REPORT DEBUG ===")
        logger.info(f"Callback data: {callback.data}")
        logger.info(f"Period from callback: {period}")
        logger.info(f"Sort by: {sort_by}")
        logger.info(f"User data: {user_data}")
        logger.info(f"Final parameters: period={period}, buyer_id={buyer_id}, geo={geo}, traffic_source={traffic_source}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        reports_service = ReportsService()
        creatives_data = await reports_service.get_creatives_report(
            period=period,
            buyer_id=buyer_id if buyer_id != "all" else None,
            geo=geo if geo != "all" else None,
            traffic_source=traffic_source,
            sort_by=sort_by
        )
        
        logger.info(f"Received {len(creatives_data)} creatives from service")
        # Log TR36 if found
        tr36 = next((c for c in creatives_data if c['creative_id'] == 'TR36'), None)
        if tr36:
            logger.info(f"TR36 found: revenue=${tr36['revenue']}, unique_clicks={tr36['unique_clicks']}, sort_metric={tr36.get(sort_by, 'N/A')}")
        else:
            logger.info(f"TR36 not found in {len(creatives_data)} creatives")
            # Log first 5 creative IDs for debugging
            creative_ids = [c['creative_id'] for c in creatives_data[:5]]
            logger.info(f"First 5 creative IDs: {creative_ids}")
        
        if not creatives_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
            user_data = await state.get_data()
            traffic_source = user_data.get("traffic_source")
            if traffic_source:
                back_callback = f"period_creatives_{traffic_source}_{period}"
            else:
                back_callback = f"period_creatives_{period}"
                
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
                ]])
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        metric_names = {
            "uepc": "uEPC",
            "revenue": "–¥–æ—Ö–æ–¥—É",
            "active": "—Å—Ä–æ–∫—É –∂–∏–∑–Ω–∏"
        }
        
        text = f"""
üé® <b>–¢–æ–ø-5 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø–æ {metric_names.get(sort_by, sort_by)}</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}
üë§ –ë–∞–π–µ—Ä: {buyer_id}
üåç –ì–µ–æ: {geo}

"""
        
        for i, creative in enumerate(creatives_data, 1):
            text += f"""
{i}. <b>ID: {creative['creative_id']}</b>
üë§ –ë–∞–π–µ—Ä: {creative['buyer_id']}
üåç –ì–µ–æ: {creative['geos']}
üñ± –£–Ω–∏–∫. –∫–ª–∏–∫–∏: {creative['unique_clicks']:,}
üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {creative['leads']:,}
üí≥ –î–µ–ø–æ–∑–∏—Ç—ã: {creative['deposits']:,}
üí∞ –î–æ—Ö–æ–¥: ${creative['revenue']:,.2f}
üìä –î–µ–ø/–†–µ–≥: {creative['dep_to_reg']:.1f}%
üíµ uEPC: ${creative['uepc']:.2f}
üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {creative['active_days']}

"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        keyboard_buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if sort_by != "uepc":
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ uEPC",
                    callback_data=f"creo_resort_uepc_{period}"
                )
            ])
        
        if sort_by != "revenue":
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üíµ –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–æ—Ö–æ–¥—É",
                    callback_data=f"creo_resort_revenue_{period}"
                )
            ])
        
        if sort_by != "active":
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üìÖ –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ä–æ–∫—É –∂–∏–∑–Ω–∏",
                    callback_data=f"creo_resort_active_{period}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å traffic_source)
        user_data = await state.get_data()
        traffic_source = user_data.get("traffic_source")
        if traffic_source:
            back_callback = f"period_creatives_{traffic_source}_{period}"
        else:
            back_callback = f"period_creatives_{period}"
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=back_callback)
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error generating creatives report: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
            ]])
        )


@router.callback_query(F.data.startswith("creo_resort_"))
async def handle_creatives_resort(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    metric = parts[2]  # uepc, revenue, active
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ state, –∞ –Ω–µ –∏–∑ callback
    user_data = await state.get_data()
    period = user_data.get("period", "yesterday")
    
    logger.info(f"creo_resort handler: metric={metric}, period_from_state={period}, callback={callback.data}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    await show_creatives_report(callback, state, period, metric)


# ===== –û–¢–ß–ï–¢–´ –ü–û –ì–ï–û =====

@router.callback_query(F.data == "reports_geo")
async def handle_geo_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ì–ï–û"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="geo")
    
    keyboard = ReportsKeyboards.traffic_source_selection("geo")
    
    text = """
üåç <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –û–¢–ß–ï–¢–´ –ü–û –ö–†–ï–ê–¢–ò–í–ê–ú =====

@router.callback_query(F.data == "reports_creatives")
async def handle_creatives_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="creatives")
    
    keyboard = ReportsKeyboards.traffic_source_selection("creatives")
    
    text = """
üé® <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –û–¢–ß–ï–¢–´ –ü–û –û–§–§–ï–†–ê–ú =====

@router.callback_query(F.data == "reports_offers")
async def handle_offers_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="offers")
    
    keyboard = ReportsKeyboards.traffic_source_selection("offers")
    
    text = """
üéØ <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø =====

def format_period_name(period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞", 
        "last3days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è",
        "last7days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        "last15days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π",
        "thismonth": "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
        "lastmonth": "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
    }
    return period_names.get(period, period)


def format_dashboard_report(data: Dict[str, Any], period: str, traffic_source: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard –æ—Ç—á–µ—Ç–∞"""
    if not data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    totals = data.get('totals', {})
    top_buyers = data.get('top_buyers', [])[:5]
    top_geos = data.get('top_geos', [])[:5]
    top_creatives = data.get('top_creatives', [])[:5]
    top_offers = data.get('top_offers', [])[:5]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, "") if traffic_source else ""
    title_suffix = f" ({source_display})" if source_display else ""
    
    text = f"""
üìä <b>Dashboard –°–≤–æ–¥–∫–∞{title_suffix}</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}

üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
üñ± –ö–ª–∏–∫–∏ (—É–Ω–∏–∫): {totals.get('clicks', 0):,}
üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {totals.get('leads', 0):,}
üí≥ –î–µ–ø–æ–∑–∏—Ç—ã: {totals.get('sales', 0):,}
üí∞ –î–æ—Ö–æ–¥: ${totals.get('revenue', 0):.2f}

üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>
üéØ CR: {totals.get('cr', 0):.2f}%
üíé reg2dep: {format_dep2reg(totals.get('sales', 0), totals.get('leads', 0))}
üí∞ uEPC: ${totals.get('epc', 0):.3f}
üë§ ARPU: ${totals.get('arpu', 0):.2f}
üìä ROI: {totals.get('roi', 0):.1f}%
‚ö° –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {totals.get('traffic_quality', 0):.1f}%

üèÜ <b>–¢–æ–ø-5 –±–∞–π–µ—Ä–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É:</b>
"""
    
    for i, buyer in enumerate(top_buyers, 1):
        text += f"{i}. {buyer.get('buyer_id', 'N/A')} - ${buyer.get('revenue', 0):.2f}\n"
    
    text += f"\nüåç <b>–¢–æ–ø-5 –ì–ï–û –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º:</b>\n"
    for i, geo in enumerate(top_geos, 1):
        text += f"{i}. {geo.get('country', 'N/A')} - {geo.get('conversions', 0)} –∫–æ–Ω–≤.\n"
    
    text += f"\nüé® <b>–¢–æ–ø-5 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø–æ EPC:</b>\n"
    for i, creative in enumerate(top_creatives, 1):
        creative_id = creative.get('creative_id', 'N/A')
        epc = creative.get('epc', 0)
        text += f"{i}. {creative_id} - ${epc:.3f} EPC\n"
    
    text += f"\nüéØ <b>–¢–æ–ø-5 –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ –æ–±—ä–µ–º—É:</b>\n"
    for i, offer in enumerate(top_offers, 1):
        text += f"{i}. {offer.get('offer_name', 'N/A')} - {offer.get('clicks', 0)} –∫–ª–∏–∫–æ–≤\n"
    
    return text


def format_buyers_report(data: List[Dict[str, Any]], report_type: str, period: str, traffic_source: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    if not data:
        traffic_label = ""
        if traffic_source == "google":
            traffic_label = " (Google)"
        elif traffic_source == "fb":
            traffic_label = " (FB)"
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}{traffic_label}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    traffic_label = ""
    if traffic_source == "google":
        traffic_label = " (Google)"
    elif traffic_source == "fb":
        traffic_label = " (FB)"
    
    text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º{traffic_label}</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}
üìä <b>–¢–∏–ø:</b> –í—Å–µ –±–∞–π–µ—Ä—ã

"""
    
    for buyer in data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        buyer_id = buyer.get('buyer_id', 'N/A')
        clicks = buyer.get('clicks', 0)
        leads = buyer.get('leads', 0)
        sales = buyer.get('sales', 0)
        revenue = buyer.get('revenue', 0)
        cr = buyer.get('cr', 0)
        epc = buyer.get('epc', 0)
        
        text += f"""
<b>{buyer_id}</b>
üñ± {clicks:,} (—É–Ω–∏–∫) | üë§ {leads} | üí≥ {sales} | ${revenue:.2f}
üéØ CR: {cr:.2f}% | üíé {format_dep2reg(sales, leads)} | üí∞ uEPC: ${epc:.3f}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
    
    return text


def format_dep2reg(sales: int, leads: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è dep2reg –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1–∫12 (8.33%)"""
    if not leads or leads == 0:
        return "0–∫0 (0%)"
    
    if sales == 0:
        return f"0–∫{leads} (0%)"
    
    ratio = leads / sales
    percentage = (sales / leads) * 100
    
    return f"1–∫{ratio:.0f} ({percentage:.1f}%)"

def format_individual_buyer_report(buyer_data: Dict[str, Any], buyer_id: str, period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    clicks = buyer_data.get('clicks', 0)
    leads = buyer_data.get('leads', 0)
    sales = buyer_data.get('sales', 0)
    revenue = buyer_data.get('revenue', 0)
    cr = buyer_data.get('cr', 0)
    epc = buyer_data.get('epc', 0)
    arpu = buyer_data.get('arpu', 0)
    roi = buyer_data.get('roi', 0)
    costs = buyer_data.get('costs', 0)
    
    text = f"""
üë§ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É</b>

üÜî <b>Buyer ID:</b> {buyer_id}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üñ± <b>–ö–ª–∏–∫–∏ (—É–Ω–∏–∫):</b> {clicks:,}
üë§ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {leads}
üí≥ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {sales}
üí∞ <b>–î–æ—Ö–æ–¥:</b> ${revenue:.2f}
üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> ${costs:.2f}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ <b>CR:</b> {cr:.2f}%
üíé <b>reg2dep:</b> {format_dep2reg(sales, leads)}
üí∞ <b>uEPC:</b> ${epc:.3f}
üë§ <b>ARPU:</b> ${arpu:.2f}
üìä <b>ROI:</b> {roi:.1f}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° <b>–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if roi > 100:
        text += "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI > 100%)\n"
    elif roi > 50:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI 50-100%)\n"
    else:
        text += "‚ùå –ù–∏–∑–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI < 50%)\n"
    
    if cr > 5:
        text += "‚úÖ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    elif cr > 2:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    else:
        text += "‚ùå –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    
    if leads > 0 and sales / leads > 0.1:
        text += "‚úÖ –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    elif leads > 0 and sales / leads > 0.05:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    elif leads > 0:
        text += "‚ùå –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    
    return text


# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ß–ï–¢–û–í =====

@router.callback_query(F.data.startswith("refresh_"))
async def handle_refresh_report(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    parts = callback.data.split("_", 2)
    report_type = parts[1]
    filters_str = parts[2] if len(parts) > 2 else "{}"
    
    try:
        filters = json.loads(filters_str)
    except:
        filters = {}
    
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç...")
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if report_type == "dashboard":
        await handle_dashboard_period(callback, state)
    elif report_type == "buyers":
        await handle_buyers_all_report(callback, state)
    # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤


# ===== –í–û–ó–í–†–ê–¢ –ö –§–ò–õ–¨–¢–†–ê–ú =====

@router.callback_query(F.data.startswith("filters_"))
async def handle_back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.replace("filters_", "")
    
    user_data = await state.get_data()
    period = user_data.get('period', 'yesterday')
    
    if report_type == "buyers":
        keyboard = ReportsKeyboards.buyers_filters(period)
        text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    elif report_type == "geo":
        keyboard = ReportsKeyboards.geo_filters(period)
        text = f"""
üåç <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:
"""
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        await handle_reports_main(callback, state)
        return
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====

@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –±–æ—Ç–∞"""
    await state.clear()
    
    text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
    # keyboard = MainMenuKeyboards.main_menu()
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


# ===== –≠–ö–°–ü–û–†–¢ –í GOOGLE SHEETS =====

@router.message(Command("export"))
async def cmd_export(message: Message, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id) or allowed_users.get(str(user.id))
    
    if not user_info:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    await state.set_state(ReportsStates.export_type_selection)
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤—ã", callback_data="export_creatives")],
        [InlineKeyboardButton(text="üë• –ë–∞–π–µ—Ä—ã", callback_data="export_buyers")],
        [InlineKeyboardButton(text="üåç –ì–ï–û", callback_data="export_geo")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = """
üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.in_(["export_creatives", "export_buyers", "export_geo"]))
async def handle_export_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    export_type = callback.data.replace("export_", "")
    logger.info(f"Export type selected: {export_type} by user {callback.from_user.id}")
    
    try:
        await state.update_data(export_type=export_type)
        await state.set_state(ReportsStates.export_period_selection)
    except Exception as e:
        logger.error(f"‚ùå ERROR updating state: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="export_period_today"),
            InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="export_period_yesterday")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="export_period_last3days"),
            InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="export_period_last7days")
        ],
        [
            InlineKeyboardButton(text="üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="export_period_thismonth"),
            InlineKeyboardButton(text="üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="export_period_lastmonth")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="export_back_to_types")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    export_names = {
        "creatives": "–ö—Ä–µ–∞—Ç–∏–≤—ã",
        "buyers": "–ë–∞–π–µ—Ä—ã", 
        "geo": "–ì–ï–û"
    }
    
    text = f"""
üìä <b>–≠–∫—Å–ø–æ—Ä—Ç: {export_names.get(export_type, export_type)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:
"""
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        # Ignore "message is not modified" errors when user clicks same button twice
        if "message is not modified" not in str(e).lower():
            logger.warning(f"Failed to edit message: {e}")
    
    await callback.answer()


@router.callback_query(F.data.startswith("export_period_"))
async def handle_export_period(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    period = callback.data.replace("export_period_", "")
    logger.info(f"Export period selected: {period} by user {callback.from_user.id}")
    
    try:
        user_data = await state.get_data()
        export_type = user_data.get("export_type")
        
        if not export_type:
            logger.error("‚ùå NO EXPORT TYPE IN STATE DATA!")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return
        
        await state.set_state(ReportsStates.export_processing)
        logger.info(f"Starting export: type={export_type}, period={period}")
        
    except Exception as e:
        logger.error(f"‚ùå ERROR IN EXPORT PERIOD HANDLER SETUP: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞", 
        "last3days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è",
        "last7days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        "thismonth": "–≠—Ç–æ—Ç –º–µ—Å—è—Ü",
        "lastmonth": "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
    }
    
    logger.critical("üîÑ Attempting to edit message...")
    try:
        await callback.message.edit_text(
            f"‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ {export_type} –∑–∞ {period_names.get(period, period)}...\n\n"
            f"üìù –°–æ–∑–¥–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É...",
            parse_mode="HTML"
        )
        logger.critical("‚úÖ Message edited successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to edit message: {e}")
    
    try:
        await callback.answer()
        logger.critical("‚úÖ Callback answered")
    except Exception as e:
        logger.error(f"‚ùå Failed to answer callback: {e}")
    
    try:
        logger.critical("üì¶ Importing GoogleSheetsReportsExporter...")
        from integrations.google.reports_export import GoogleSheetsReportsExporter
        logger.critical("‚úÖ Import successful")
        
        logger.critical("üèóÔ∏è Creating exporter instance...")
        exporter = GoogleSheetsReportsExporter()
        logger.critical("‚úÖ Exporter created")
        
        logger.critical(f"üöÄ Starting export for type: {export_type}, period: {period}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if export_type == "creatives":
            logger.critical("üìä Calling export_creatives_report...")
            spreadsheet_url = await exporter.export_creatives_report(period)
        elif export_type == "buyers":
            logger.critical("üë• Calling export_buyers_report...")
            spreadsheet_url = await exporter.export_buyers_report(period)
        elif export_type == "geo":
            logger.critical("üåç Calling export_geo_report...")
            spreadsheet_url = await exporter.export_geo_report(period)
        else:
            logger.error(f"‚ùå Unsupported export type: {export_type}")
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_type}")
        
        logger.critical(f"‚úÖ Export completed successfully! URL: {spreadsheet_url}")
        
        # –£—Å–ø–µ—à–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        success_text = f"""
‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üìä <b>–¢–∏–ø:</b> {export_type}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_names.get(period, period)}
üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="{spreadsheet_url}">–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>

üí° –¢–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Google Drive –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
"""
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_new")],
            [InlineKeyboardButton(text="üìä –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="reports_main")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(
                success_text,
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            # Ignore "message is not modified" errors
            if "message is not modified" not in str(e).lower():
                logger.warning(f"Failed to edit success message: {e}")
        
    except Exception as e:
        logger.error(f"Export error: {e}")
        
        error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ</b>

üìä <b>–¢–∏–ø:</b> {export_type}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_names.get(period, period)}
üêõ <b>–û—à–∏–±–∫–∞:</b> {str(e)[:200]}

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.
"""
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"export_period_{period}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="export_back_to_period")],
            [InlineKeyboardButton(text="üìä –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="reports_main")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(
                error_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            # Ignore "message is not modified" errors
            if "message is not modified" not in str(e).lower():
                logger.warning(f"Failed to edit error message: {e}")


@router.callback_query(F.data == "export_new")
async def handle_export_new(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç"""
    await cmd_export(callback.message, state)


@router.callback_query(F.data == "export_back_to_types")  
async def handle_export_back_to_types(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(ReportsStates.export_type_selection)
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤—ã", callback_data="export_creatives")],
        [InlineKeyboardButton(text="üë• –ë–∞–π–µ—Ä—ã", callback_data="export_buyers")],
        [InlineKeyboardButton(text="üåç –ì–ï–û", callback_data="export_geo")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = """
üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:
"""
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        # Ignore "message is not modified" errors when user clicks same button twice
        if "message is not modified" not in str(e).lower():
            logger.warning(f"Failed to edit message: {e}")
    await callback.answer()


@router.callback_query(F.data == "export_back_to_period")
async def handle_export_back_to_period(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    user_data = await state.get_data()
    export_type = user_data.get("export_type", "creatives")
    
    await state.set_state(ReportsStates.export_period_selection)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏  
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="export_period_today"),
            InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="export_period_yesterday")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="export_period_last3days"),
            InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="export_period_last7days")
        ],
        [
            InlineKeyboardButton(text="üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="export_period_thismonth"),
            InlineKeyboardButton(text="üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="export_period_lastmonth")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="export_back_to_types")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    export_names = {
        "creatives": "–ö—Ä–µ–∞—Ç–∏–≤—ã",
        "buyers": "–ë–∞–π–µ—Ä—ã",
        "geo": "–ì–ï–û"
    }
    
    text = f"""
üìä <b>–≠–∫—Å–ø–æ—Ä—Ç: {export_names.get(export_type, export_type)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()