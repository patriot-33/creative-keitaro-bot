"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
"""

import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.keyboards.reports import ReportsKeyboards
from bot.services.reports import ReportsService
from core.config import settings
from core.enums import ReportPeriod

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReportsStates(StatesGroup):
    main_menu = State()
    traffic_source_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    period_selection = State()
    filters_selection = State()
    report_display = State()


@router.message(Command("reports"))
async def cmd_reports(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–æ–≤"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id)
    
    if not user_info:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç–∞–º.")
        return
    
    await state.set_state(ReportsStates.main_menu)
    
    keyboard = ReportsKeyboards.main_reports_menu()
    
    welcome_text = f"""
üìä <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:

‚Ä¢ <b>Dashboard –°–≤–æ–¥–∫–∞</b> - –æ–±—â–∏–π –æ–±–∑–æ—Ä –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b> - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–¥–∏–∞–±–∞–µ—Ä–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b> - –∞–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b> - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–æ–≤  
‚Ä¢ <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
"""
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    logger.info(f"User {user.id} opened reports system")


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –û–¢–ß–ï–¢–û–í =====

@router.callback_query(F.data == "reports_main")
async def handle_reports_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await state.set_state(ReportsStates.main_menu)
    
    keyboard = ReportsKeyboards.main_reports_menu()
    
    text = """
üìä <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== DASHBOARD –°–í–û–î–ö–ê =====

@router.callback_query(F.data == "reports_dashboard")
async def handle_dashboard_report(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Dashboard —Å–≤–æ–¥–∫–∏"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="dashboard")
    
    keyboard = ReportsKeyboards.traffic_source_selection("dashboard")
    
    text = """
üìä <b>Dashboard –°–≤–æ–¥–∫–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –í–´–ë–û–† –ò–°–¢–û–ß–ù–ò–ö–ê –¢–†–ê–§–ò–ö–ê =====

@router.callback_query(F.data.startswith("trafficsrc_"))
async def handle_traffic_source_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    parts = callback.data.split("_")
    
    if len(parts) == 2:
        # –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (trafficsrc_dashboard)
        report_type = parts[1]
        await state.set_state(ReportsStates.traffic_source_selection)
        
        keyboard = ReportsKeyboards.traffic_source_selection(report_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report_names = {
            "dashboard": "Dashboard –°–≤–æ–¥–∫–∞",
            "buyers": "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º",
            "geo": "–û—Ç—á–µ—Ç –ø–æ –ì–ï–û",
            "creatives": "–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º",
            "offers": "–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"
        }
        report_display = report_names.get(report_type, report_type)
        
        text = f"""
üìä <b>{report_display}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        return
    
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    report_type = parts[1]  # dashboard, buyers, geo, etc.
    traffic_source = parts[2]  # google, fb
    
    await state.set_state(ReportsStates.period_selection)
    await state.update_data(report_type=report_type, traffic_source=traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    report_names = {
        "dashboard": "Dashboard –°–≤–æ–¥–∫–∞",
        "buyers": "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º",
        "geo": "–û—Ç—á–µ—Ç –ø–æ –ì–ï–û",
        "creatives": "–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º",
        "offers": "–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"
    }
    report_display = report_names.get(report_type, report_type)
    
    keyboard = ReportsKeyboards.period_selection(report_type, traffic_source)
    
    text = f"""
üìä <b>{report_display} ({source_display})</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("period_dashboard_"))
async def handle_dashboard_period(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ Dashboard —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"Dashboard callback data: {callback.data}")
    callback_parts = callback.data.replace("period_dashboard_", "").split("_")
    logger.info(f"Parsed callback parts: {callback_parts}")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞), —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ (—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º)
    if len(callback_parts) >= 2:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: period_dashboard_google_yesterday –∏–ª–∏ period_dashboard_fb_today
        traffic_source = callback_parts[0]
        period = callback_parts[1]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è traffic_source
        if traffic_source not in ["google", "fb"]:
            logger.warning(f"Invalid traffic_source: {traffic_source}, falling back to None")
            traffic_source = None
        
        await state.update_data(traffic_source=traffic_source)
        logger.info(f"New format - traffic_source: {traffic_source}, period: {period}")
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: period_dashboard_yesterday
        period = callback_parts[0]
        traffic_source = None
        logger.info(f"Old format - period: {period}, traffic_source: None")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    valid_periods = ["today", "yesterday", "last3days", "last7days", "last15days", "thismonth", "lastmonth"]
    if period not in valid_periods:
        logger.warning(f"Invalid period: {period}, falling back to yesterday")
        period = "yesterday"
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(report_type="dashboard", period=period)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞"
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Dashboard —Å–≤–æ–¥–∫—É...")
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        reports_service = ReportsService()
        user_data = await state.get_data()
        traffic_source = user_data.get("traffic_source")
        
        logger.info(f"Processing dashboard: period={period}, traffic_source={traffic_source}")
        
        dashboard_data = await reports_service.get_dashboard_summary(period, traffic_source)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"Dashboard data received: {dashboard_data}")
        
        if not dashboard_data:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Dashboard")
            return
        
        totals = dashboard_data.get('totals', {})
        logger.info(f"Totals: clicks={totals.get('clicks', 0)}, leads={totals.get('leads', 0)}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = format_dashboard_report(dashboard_data, period, traffic_source)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = ReportsKeyboards.report_actions("dashboard", {"period": period})
        
        await callback.message.edit_text(
            report_text, 
            reply_markup=keyboard, 
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error generating dashboard report: {e}")
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        if "Broken pipe" in str(e) or "Connection" in str(e):
            error_message += "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É Keitaro.\n"
            error_message += "‚è±Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥.\n\n"
        elif "timeout" in str(e).lower():
            error_message += "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.\n"
            error_message += "üìä –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥.\n\n"
        else:
            error_message += f"üêõ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
        
        error_message += "üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
        error_message += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥\n"
        error_message += "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥\n"
        error_message += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        
        keyboard = ReportsKeyboards.period_selection("dashboard", None, "reports_main")
        
        await callback.message.edit_text(
            error_message,
            reply_markup=keyboard
        )


# ===== –û–¢–ß–ï–¢–´ –ü–û –ë–ê–ô–ï–†–ê–ú =====

@router.callback_query(F.data == "reports_buyers")
async def handle_buyers_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="buyers")
    
    keyboard = ReportsKeyboards.traffic_source_selection("buyers")
    
    text = """
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("period_buyers_"))
async def handle_buyers_period(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    callback_parts = callback.data.replace("period_buyers_", "").split("_")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
    if len(callback_parts) >= 2:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: period_buyers_google_yesterday
        traffic_source = callback_parts[0]
        period = callback_parts[1]
        await state.update_data(traffic_source=traffic_source)
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: period_buyers_yesterday
        period = callback_parts[0]
        traffic_source = None
    
    await state.set_state(ReportsStates.filters_selection)
    await state.update_data(report_type="buyers", period=period)
    
    user_data = await state.get_data()
    traffic_source = user_data.get("traffic_source")
    
    keyboard = ReportsKeyboards.buyers_filters(period, traffic_source)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, "") if traffic_source else ""
    title_suffix = f" ({source_display})" if source_display else ""
    
    text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º{title_suffix}</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("buyers_all_"))
async def handle_buyers_all_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º"""
    parts = callback.data.split("_")
    period = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    user_data = await state.get_data()
    traffic_source = user_data.get("traffic_source")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "all", "period": period})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    traffic_label = ""
    if traffic_source == "google":
        traffic_label = " (Google)"
    elif traffic_source == "fb":
        traffic_label = " (FB)"
    
    await callback.message.edit_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º{traffic_label}...")
    await callback.answer()
    
    try:
        reports_service = ReportsService()
        buyers_data = await reports_service.get_buyers_report(period, "all", None, traffic_source)
        
        report_text = format_buyers_report(buyers_data, "all", period, traffic_source)
        keyboard = ReportsKeyboards.report_actions("buyers", {"type": "all", "period": period})
        
        await callback.message.edit_text(
            report_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in buyers report: {e}")
        
        error_message = "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ –±–∞–π–µ—Ä–∞–º\n\n"
        
        if "Broken pipe" in str(e) or "Connection" in str(e):
            error_message += "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Keitaro.\n"
            error_message += "‚è±Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥."
        else:
            error_message += f"üêõ –û—à–∏–±–∫–∞: {str(e)[:100]}"
        
        keyboard = ReportsKeyboards.buyers_filters(period)
        
        await callback.message.edit_text(
            error_message,
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("buyers_select_"))
async def handle_buyers_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞"""
    period = callback.data.replace("buyers_select_", "")
    
    await state.set_state(ReportsStates.filters_selection)
    await state.update_data(report_type="buyers", period=period, filter_type="select")
    
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤...")
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–π–µ—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        reports_service = ReportsService()
        user_data = await state.get_data()
        traffic_source = user_data.get("traffic_source")
        buyers_data = await reports_service.get_buyers_report(period, "all", None, traffic_source)
        
        if not buyers_data:
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=ReportsKeyboards.buyers_filters(period)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–π–µ—Ä–∞–º–∏
        keyboard_buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–π–µ—Ä–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buyers_data), 2):
            row = []
            for buyer in buyers_data[i:i+2]:
                buyer_id = buyer.get('buyer_id', 'unknown')
                revenue = buyer.get('revenue', 0)
                leads = buyer.get('leads', 0)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"üë§ {buyer_id} | ${revenue:.0f} | {leads} —Ä–µ–≥"
                callback_data = f"buyer_{buyer_id}_{period}"
                
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data
                ))
            keyboard_buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data=f"period_buyers_{period}")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        text = f"""
üë• <b>–í—ã–±–æ—Ä –±–∞–π–µ—Ä–∞</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:</b>

üìä –§–æ—Ä–º–∞—Ç: –ë–∞–π–µ—Ä | –î–æ—Ö–æ–¥ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error loading buyers list: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–∞–π–µ—Ä–æ–≤.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReportsKeyboards.buyers_filters(period)
        )

@router.callback_query(F.data.startswith("buyer_") & F.data.contains("_"))
async def handle_individual_buyer_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–∞–π–µ—Ä—É"""
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
        
    buyer_id = parts[1]
    period = parts[2]
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "individual", "buyer_id": buyer_id, "period": period})
    
    await callback.message.edit_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É {buyer_id}...")
    await callback.answer()
    
    try:
        reports_service = ReportsService()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω–æ–≥–æ
        all_buyers_data = await reports_service.get_buyers_report(period, "all")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞
        buyer_data = None
        for buyer in all_buyers_data:
            if buyer.get('buyer_id') == buyer_id:
                buyer_data = buyer
                break
        
        if not buyer_data:
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä—É {buyer_id} –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}\n\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω–æ, —É –±–∞–π–µ—Ä–∞ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                reply_markup=ReportsKeyboards.buyers_filters(period)
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞
        text = format_individual_buyer_report(buyer_data, buyer_id, period)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard_buttons = [
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"buyer_{buyer_id}_{period}"),
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="reports_buyers")
            ],
            [
                InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –±–∞–π–µ—Ä–æ–≤", callback_data=f"buyers_select_{period}")
            ],
            [
                InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤", callback_data="reports_main")
            ]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in individual buyer report: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä—É {buyer_id}.\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReportsKeyboards.buyers_filters(period)
        )

@router.callback_query(F.data.startswith("buyers_traffic_"))
async def handle_buyers_traffic_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É (–±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –±–∞–π–µ—Ä–∞–º)"""
    period = callback.data.replace("buyers_traffic_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "traffic", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buyers_geo_"))
async def handle_buyers_geo_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –±–∞–π–µ—Ä–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ì–ï–û"""
    period = callback.data.replace("buyers_geo_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "geo", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º –∏ –ì–ï–û...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ì–ï–û –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buyers_offers_"))
async def handle_buyers_offers_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—á–µ—Ç –±–∞–π–µ—Ä–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    period = callback.data.replace("buyers_offers_", "")
    
    await state.set_state(ReportsStates.report_display)
    await state.update_data(filters={"type": "offers", "period": period})
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º –∏ –æ—Ñ—Ñ–µ—Ä–∞–º...")
    await callback.answer()
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.message.edit_text(
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=ReportsKeyboards.buyers_filters(period),
        parse_mode="HTML"
    )


# ===== –û–¢–ß–ï–¢–´ –ü–û –ì–ï–û =====

@router.callback_query(F.data == "reports_geo")
async def handle_geo_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ì–ï–û"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="geo")
    
    keyboard = ReportsKeyboards.traffic_source_selection("geo")
    
    text = """
üåç <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –û–¢–ß–ï–¢–´ –ü–û –ö–†–ï–ê–¢–ò–í–ê–ú =====

@router.callback_query(F.data == "reports_creatives")
async def handle_creatives_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="creatives")
    
    keyboard = ReportsKeyboards.traffic_source_selection("creatives")
    
    text = """
üé® <b>–û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –û–¢–ß–ï–¢–´ –ü–û –û–§–§–ï–†–ê–ú =====

@router.callback_query(F.data == "reports_offers")
async def handle_offers_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    await state.set_state(ReportsStates.traffic_source_selection)
    await state.update_data(report_type="offers")
    
    keyboard = ReportsKeyboards.traffic_source_selection("offers")
    
    text = """
üéØ <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø =====

def format_period_name(period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞", 
        "last3days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è",
        "last7days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        "last15days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π",
        "thismonth": "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
        "lastmonth": "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
    }
    return period_names.get(period, period)


def format_dashboard_report(data: Dict[str, Any], period: str, traffic_source: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard –æ—Ç—á–µ—Ç–∞"""
    if not data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    totals = data.get('totals', {})
    top_buyers = data.get('top_buyers', [])[:5]
    top_geos = data.get('top_geos', [])[:5]
    top_creatives = data.get('top_creatives', [])[:5]
    top_offers = data.get('top_offers', [])[:5]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    source_names = {
        "google": "üîç Google",
        "fb": "üì± FB"
    }
    source_display = source_names.get(traffic_source, "") if traffic_source else ""
    title_suffix = f" ({source_display})" if source_display else ""
    
    text = f"""
üìä <b>Dashboard –°–≤–æ–¥–∫–∞{title_suffix}</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}

üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
üñ± –ö–ª–∏–∫–∏ (—É–Ω–∏–∫): {totals.get('clicks', 0):,}
üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {totals.get('leads', 0):,}
üí≥ –î–µ–ø–æ–∑–∏—Ç—ã: {totals.get('sales', 0):,}
üí∞ –î–æ—Ö–æ–¥: ${totals.get('revenue', 0):.2f}

üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>
üéØ CR: {totals.get('cr', 0):.2f}%
üíé reg2dep: {format_dep2reg(totals.get('sales', 0), totals.get('leads', 0))}
üí∞ uEPC: ${totals.get('epc', 0):.3f}
üë§ ARPU: ${totals.get('arpu', 0):.2f}
üìä ROI: {totals.get('roi', 0):.1f}%
‚ö° –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {totals.get('traffic_quality', 0):.1f}%

üèÜ <b>–¢–æ–ø-5 –±–∞–π–µ—Ä–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É:</b>
"""
    
    for i, buyer in enumerate(top_buyers, 1):
        text += f"{i}. {buyer.get('buyer_id', 'N/A')} - ${buyer.get('revenue', 0):.2f}\n"
    
    text += f"\nüåç <b>–¢–æ–ø-5 –ì–ï–û –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º:</b>\n"
    for i, geo in enumerate(top_geos, 1):
        text += f"{i}. {geo.get('country', 'N/A')} - {geo.get('conversions', 0)} –∫–æ–Ω–≤.\n"
    
    text += f"\nüé® <b>–¢–æ–ø-5 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø–æ EPC:</b>\n"
    for i, creative in enumerate(top_creatives, 1):
        creative_id = creative.get('creative_id', 'N/A')
        epc = creative.get('epc', 0)
        text += f"{i}. {creative_id} - ${epc:.3f} EPC\n"
    
    text += f"\nüéØ <b>–¢–æ–ø-5 –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ –æ–±—ä–µ–º—É:</b>\n"
    for i, offer in enumerate(top_offers, 1):
        text += f"{i}. {offer.get('offer_name', 'N/A')} - {offer.get('clicks', 0)} –∫–ª–∏–∫–æ–≤\n"
    
    return text


def format_buyers_report(data: List[Dict[str, Any]], report_type: str, period: str, traffic_source: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
    if not data:
        traffic_label = ""
        if traffic_source == "google":
            traffic_label = " (Google)"
        elif traffic_source == "fb":
            traffic_label = " (FB)"
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–π–µ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_period_name(period)}{traffic_label}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    traffic_label = ""
    if traffic_source == "google":
        traffic_label = " (Google)"
    elif traffic_source == "fb":
        traffic_label = " (FB)"
    
    text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º{traffic_label}</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}
üìä <b>–¢–∏–ø:</b> –í—Å–µ –±–∞–π–µ—Ä—ã

"""
    
    for buyer in data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        buyer_id = buyer.get('buyer_id', 'N/A')
        clicks = buyer.get('clicks', 0)
        leads = buyer.get('leads', 0)
        sales = buyer.get('sales', 0)
        revenue = buyer.get('revenue', 0)
        cr = buyer.get('cr', 0)
        epc = buyer.get('epc', 0)
        
        text += f"""
<b>{buyer_id}</b>
üñ± {clicks:,} (—É–Ω–∏–∫) | üë§ {leads} | üí≥ {sales} | ${revenue:.2f}
üéØ CR: {cr:.2f}% | üíé {format_dep2reg(sales, leads)} | üí∞ uEPC: ${epc:.3f}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
    
    return text


def format_dep2reg(sales: int, leads: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è dep2reg –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1–∫12 (8.33%)"""
    if not leads or leads == 0:
        return "0–∫0 (0%)"
    
    if sales == 0:
        return f"0–∫{leads} (0%)"
    
    ratio = leads / sales
    percentage = (sales / leads) * 100
    
    return f"1–∫{ratio:.0f} ({percentage:.1f}%)"

def format_individual_buyer_report(buyer_data: Dict[str, Any], buyer_id: str, period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    clicks = buyer_data.get('clicks', 0)
    leads = buyer_data.get('leads', 0)
    sales = buyer_data.get('sales', 0)
    revenue = buyer_data.get('revenue', 0)
    cr = buyer_data.get('cr', 0)
    epc = buyer_data.get('epc', 0)
    arpu = buyer_data.get('arpu', 0)
    roi = buyer_data.get('roi', 0)
    costs = buyer_data.get('costs', 0)
    
    text = f"""
üë§ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É</b>

üÜî <b>Buyer ID:</b> {buyer_id}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {format_period_name(period)}

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üñ± <b>–ö–ª–∏–∫–∏ (—É–Ω–∏–∫):</b> {clicks:,}
üë§ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {leads}
üí≥ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {sales}
üí∞ <b>–î–æ—Ö–æ–¥:</b> ${revenue:.2f}
üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> ${costs:.2f}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ <b>CR:</b> {cr:.2f}%
üíé <b>reg2dep:</b> {format_dep2reg(sales, leads)}
üí∞ <b>uEPC:</b> ${epc:.3f}
üë§ <b>ARPU:</b> ${arpu:.2f}
üìä <b>ROI:</b> {roi:.1f}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° <b>–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if roi > 100:
        text += "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI > 100%)\n"
    elif roi > 50:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI 50-100%)\n"
    else:
        text += "‚ùå –ù–∏–∑–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (ROI < 50%)\n"
    
    if cr > 5:
        text += "‚úÖ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    elif cr > 2:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    else:
        text += "‚ùå –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    
    if leads > 0 and sales / leads > 0.1:
        text += "‚úÖ –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    elif leads > 0 and sales / leads > 0.05:
        text += "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    elif leads > 0:
        text += "‚ùå –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç—ã\n"
    
    return text


# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ß–ï–¢–û–í =====

@router.callback_query(F.data.startswith("refresh_"))
async def handle_refresh_report(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    parts = callback.data.split("_", 2)
    report_type = parts[1]
    filters_str = parts[2] if len(parts) > 2 else "{}"
    
    try:
        filters = json.loads(filters_str)
    except:
        filters = {}
    
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç...")
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if report_type == "dashboard":
        await handle_dashboard_period(callback, state)
    elif report_type == "buyers":
        await handle_buyers_all_report(callback, state)
    # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤


# ===== –í–û–ó–í–†–ê–¢ –ö –§–ò–õ–¨–¢–†–ê–ú =====

@router.callback_query(F.data.startswith("filters_"))
async def handle_back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.replace("filters_", "")
    
    user_data = await state.get_data()
    period = user_data.get('period', 'yesterday')
    
    if report_type == "buyers":
        keyboard = ReportsKeyboards.buyers_filters(period)
        text = f"""
üë• <b>–û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
"""
    elif report_type == "geo":
        keyboard = ReportsKeyboards.geo_filters(period)
        text = f"""
üåç <b>–û—Ç—á–µ—Ç –ø–æ –ì–ï–û</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {format_period_name(period)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:
"""
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        await handle_reports_main(callback, state)
        return
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====

@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –±–æ—Ç–∞"""
    await state.clear()
    
    text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
    # keyboard = MainMenuKeyboards.main_menu()
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()