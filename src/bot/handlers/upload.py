"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
"""

import logging
from typing import Dict, Any, List, Optional
import os
import json
from datetime import datetime
import hashlib
import mimetypes

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from core.config import settings
from bot.services.custom_geos import CustomGeosService

logger = logging.getLogger(__name__)
router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
class UploadStates(StatesGroup):
    waiting_geo = State()
    waiting_custom_geo = State()
    waiting_file = State()
    choosing_naming = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    waiting_custom_name = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    waiting_notes = State()

async def load_custom_geos() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ì–ï–û –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        custom_geos = await CustomGeosService.get_all_custom_geos()
        logger.error(f"üîÑ CUSTOM GEOS: Loaded {len(custom_geos)} from database: {custom_geos}")
        return custom_geos
    except Exception as e:
        logger.error(f"‚ùå CUSTOM GEOS: Error loading from database: {e}")
        return []

async def save_custom_geo(geo_code: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ì–ï–û –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.error(f"üíæ CUSTOM GEOS DB: Attempting to save geo code: {geo_code}")
        result = await CustomGeosService.add_custom_geo(geo_code)
        
        if result:
            logger.error(f"‚úÖ CUSTOM GEOS DB: Successfully saved geo code: {geo_code}")
        else:
            logger.error(f"‚ùå CUSTOM GEOS DB: Failed to save geo code: {geo_code}")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå CUSTOM GEOS DB: Exception saving geo code {geo_code}: {e}")
        return False

async def get_all_geos() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ì–ï–û (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ) –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    custom_geos = await load_custom_geos()
    all_geos = list(set(SUPPORTED_GEOS + custom_geos))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return sorted(all_geos)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ì–ï–û
SUPPORTED_GEOS = [
    "AT", "AZ", "BE", "BG", "CH", "CZ", "DE", "ES", "FR", "HR", 
    "HU", "IT", "NL", "PL", "RO", "SI", "SK", "TR", "UK", "US"
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ì–ï–û
CUSTOM_GEOS_FILE = "data/custom_geos.json"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.mp4', '.mov', '.gif', '.webp'}
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB

def generate_creative_id(geo: str, buyer_id: str = None, custom_name: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫—Ä–µ–∞—Ç–∏–≤–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    
    Args:
        geo: –ö–æ–¥ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (US, TR, AZ –∏ —Ç.–¥.)
        buyer_id: ID –±–∞–π–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (v1, n1, –∏ —Ç.–¥.)
        custom_name: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (tr12, test24 –∏ —Ç.–¥.)
    
    Returns:
        str: –ò—Ç–æ–≥–æ–≤—ã–π creative_id
        
    Examples:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ: generate_creative_id("US", "v1", "tr12") -> "v1tr12"
        –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: generate_creative_id("US") -> "IDUS131225001"
    """
    import re
    from datetime import datetime
    import random
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å buyer_id –∏ custom_name - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if buyer_id and buyer_id.strip() and custom_name and custom_name.strip():
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–∏–≤–æ–¥–∏–º –∫ lowercase
        normalized_buyer = buyer_id.lower().strip()
        normalized_name = custom_name.lower().strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã
        if not re.match(r'^[a-z0-9]+$', normalized_buyer):
            raise ValueError(f"Buyer ID —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {buyer_id}")
        if not re.match(r'^[a-z0-9]+$', normalized_name):
            raise ValueError(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {custom_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π ID
        result = f"{normalized_buyer}{normalized_name}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç)
        if len(result) > 25:
            raise ValueError(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å. 25)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        forbidden_values = ['null', 'unknown', 'empty']
        if result in forbidden_values:
            raise ValueError(f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {result}")
            
        return result
    
    # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    now = datetime.now()
    date_part = now.strftime('%d%m%y')  # –î–î–ú–ú–ì–ì
    sequence = random.randint(1, 999)   # –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä 001-999
    
    return f"ID{geo.upper()}{date_part}{sequence:03d}"

@router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id) or allowed_users.get(str(user.id))
    
    if not user_info:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
    from bot.services.subscription_checker import SubscriptionChecker
    
    logger.info(f"üîí SUBSCRIPTION CHECK: Channel ID = {settings.required_channel_id}")
    
    if settings.required_channel_id:
        logger.info(f"üîç SUBSCRIPTION: Checking subscription for user {user.id} to channel {settings.required_channel_id}")
        is_subscribed = await SubscriptionChecker.is_user_subscribed(message.bot, user.id)
        
        if not is_subscribed:
            logger.info(f"‚ùå SUBSCRIPTION: User {user.id} is NOT subscribed to channel {settings.required_channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = await SubscriptionChecker.get_channel_info(message.bot)
            channel_link = SubscriptionChecker.get_channel_link()
            
            channel_name = channel_info.get('title', '–ö–∞–Ω–∞–ª') if channel_info else '–ö–∞–Ω–∞–ª'
            
            text = f"""
üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
üì¢ <b>{channel_name}</b>

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
            
            buttons = []
            
            if channel_link:
                buttons.append([InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=channel_link
                )])
            
            buttons.append([InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_subscription"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            return
        else:
            logger.info(f"‚úÖ SUBSCRIPTION: User {user.id} is subscribed to channel {settings.required_channel_id}")
    else:
        logger.info("üîí SUBSCRIPTION: No required channel configured, skipping check")
    
    await state.set_state(UploadStates.waiting_geo)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ì–ï–û –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    all_geos = await get_all_geos()
    custom_geos = await load_custom_geos()
    keyboard_rows = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ì–ï–û –Ω–∞ —Ä—è–¥—ã –ø–æ 4 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(all_geos), 4):
        row = []
        for geo in all_geos[i:i+4]:
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ì–ï–û –∑–≤–µ–∑–¥–æ—á–∫–æ–π
            if geo in custom_geos:
                row.append(InlineKeyboardButton(text=f"‚≠ê {geo}", callback_data=f"geo_{geo}"))
            else:
                row.append(InlineKeyboardButton(text=f"üåç {geo}", callback_data=f"geo_{geo}"))
        keyboard_rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ì–ï–û –∏ –æ—Ç–º–µ–Ω—ã
    keyboard_rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–ï–û", callback_data="add_custom_geo")])
    keyboard_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    text = f"""
üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>

‚≠ê - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ì–ï–û
üåç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ì–ï–û

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:</b>
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF, WEBP
‚Ä¢ –í–∏–¥–µ–æ: MP4, MOV
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë

üéØ <b>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ì–ï–û –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</b>
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    logger.info(f"User {user.id} started upload process")

@router.callback_query(F.data.startswith("geo_"))
async def handle_geo_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ì–ï–û"""
    user = callback.from_user
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from bot.services.subscription_checker import SubscriptionChecker
    
    if settings.required_channel_id:
        logger.info(f"üîç SUBSCRIPTION CALLBACK: Checking subscription for user {user.id} to channel {settings.required_channel_id}")
        is_subscribed = await SubscriptionChecker.is_user_subscribed(callback.bot, user.id)
        
        if not is_subscribed:
            logger.info(f"‚ùå SUBSCRIPTION CALLBACK: User {user.id} is NOT subscribed to channel {settings.required_channel_id}")
            await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            channel_info = await SubscriptionChecker.get_channel_info(callback.bot)
            channel_link = SubscriptionChecker.get_channel_link()
            
            channel_name = channel_info.get('title', '–ö–∞–Ω–∞–ª') if channel_info else '–ö–∞–Ω–∞–ª'
            
            text = f"""
üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
üì¢ <b>{channel_name}</b>

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
            
            buttons = []
            
            if channel_link:
                buttons.append([InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=channel_link
                )])
            
            buttons.append([InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_subscription"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            return
    
    geo = callback.data.replace("geo_", "")
    
    all_geos = await get_all_geos()
    if geo not in all_geos:
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –ì–ï–û!", show_alert=True)
        return
    
    await state.update_data(geo=geo)
    await state.set_state(UploadStates.waiting_file)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ì–ï–û", callback_data="change_geo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = f"""
üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>

üåç <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ì–ï–û:</b> {geo}

üìé <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>

‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF, WEBP
‚Ä¢ üé¨ –í–∏–¥–µ–æ: MP4, MOV

üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑

üí° <b>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</b>
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ì–ï–û: {geo}")

@router.callback_query(F.data == "change_geo")
async def handle_change_geo(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ì–ï–û"""
    await state.set_state(UploadStates.waiting_geo)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ì–ï–û
    all_geos = await get_all_geos()
    custom_geos = await load_custom_geos()
    keyboard_rows = []
    
    for i in range(0, len(all_geos), 4):
        row = []
        for geo in all_geos[i:i+4]:
            if geo in custom_geos:
                row.append(InlineKeyboardButton(text=f"‚≠ê {geo}", callback_data=f"geo_{geo}"))
            else:
                row.append(InlineKeyboardButton(text=f"üåç {geo}", callback_data=f"geo_{geo}"))
        keyboard_rows.append(row)
    
    keyboard_rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–ï–û", callback_data="add_custom_geo")])
    keyboard_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    text = """
üåç <b>–í—ã–±–æ—Ä –ì–ï–û</b>

‚≠ê - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ì–ï–û
üåç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ì–ï–û

–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞:
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.message(UploadStates.waiting_file)
async def handle_file_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª
    if not (message.photo or message.video or message.document or message.animation):
        await message.answer(
            "‚ùå <b>–§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!</b>\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫—Ä–µ–∞—Ç–∏–≤–∞.\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WEBP, MP4, MOV",
            parse_mode="HTML"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
    file_obj = None
    file_name = None
    file_size = 0
    
    if message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_obj = message.photo[-1]
        file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        file_size = file_obj.file_size or 0
    elif message.video:
        file_obj = message.video
        file_name = message.video.file_name or f"video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
        file_size = message.video.file_size or 0
    elif message.animation:
        file_obj = message.animation  
        file_name = message.animation.file_name or f"animation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.gif"
        file_size = message.animation.file_size or 0
    elif message.document:
        file_obj = message.document
        file_name = message.document.file_name or f"document_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        file_size = message.document.file_size or 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
            f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} –ú–ë\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë\n\n"
            f"üí° –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            parse_mode="HTML"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if file_name:
        file_ext = os.path.splitext(file_name.lower())[1] if '.' in file_name else '.unknown'
    else:
        file_ext = '.unknown'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if file_ext not in ALLOWED_EXTENSIONS and file_ext != '.unknown':
        await message.answer(
            f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!</b>\n\n"
            f"üìÑ –í–∞—à —Ñ–∞–π–ª: {file_ext}\n\n"
            f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {', '.join([ext for ext in ALLOWED_EXTENSIONS if ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp']])}\n"
            f"‚Ä¢ –í–∏–¥–µ–æ: {', '.join([ext for ext in ALLOWED_EXTENSIONS if ext in ['.mp4', '.mov']])}\n\n"
            f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    user_data = await state.get_data()
    geo = user_data.get('geo')
    
    await state.update_data(
        file_id=file_obj.file_unique_id,
        telegram_file_id=file_obj.file_id,
        file_name=file_name,
        file_size=file_size,
        file_ext=file_ext
    )
    
    logger.info(f"File processed: {file_name}, size: {file_size}, ext: {file_ext}, geo: {geo}")
    await state.set_state(UploadStates.choosing_naming)
    logger.info("State set to choosing_naming")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–¥–∞—Ç—å —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="custom_naming")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="auto_naming")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = f"""
‚úÖ <b>–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!</b>

üåç <b>–ì–ï–û:</b> {geo}
üìÑ <b>–§–∞–π–ª:</b> {file_name}
üìè <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.0f} –ö–ë
üéØ <b>–¢–∏–ø:</b> {file_ext.upper()}

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>

üìù <b>–°–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ</b> - –≤—ã –∑–∞–¥–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: tr12)
ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ</b> - —Å–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

üí° <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b> –±—É–¥—É—Ç –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: <code>–≤–∞—à_buyer_id + –Ω–∞–∑–≤–∞–Ω–∏–µ</code>
"""
    
    logger.info("Sending notes prompt message to user")
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    logger.info(f"User {user.id} uploaded file: {file_name} ({file_size} bytes) - notes prompt sent")

@router.callback_query(F.data == "custom_naming")
async def handle_custom_naming(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await state.set_state(UploadStates.waiting_custom_name)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="auto_naming")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = """
üìù <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>

‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>

üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
‚Ä¢ –î–ª–∏–Ω–∞: 2-20 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä: tr12, test24, promo1

üí° <b>–ò—Ç–æ–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç:</b> <code>–≤–∞—à_buyer_id + –Ω–∞–∑–≤–∞–Ω–∏–µ</code>
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "auto_naming")
async def handle_auto_naming(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await state.set_state(UploadStates.waiting_notes)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="save_creative")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = """
ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ!</b>

üìã <b>–°–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>
<code>ID–ìEO–î–î–ú–ú–ì–ìNNN</code>

üí¨ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—Ä–µ–∞—Ç–∏–≤—É?</b>

üí° –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ –≤ –æ—Ç—á–µ—Ç–∞—Ö
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.message(UploadStates.waiting_custom_name)
async def handle_custom_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    import re
    from sqlalchemy import select
    from db.models.creative import Creative
    from db.database import get_db_session
    
    user = message.from_user
    custom_name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(custom_name) < 2 or len(custom_name) > 20:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞!</b>\n\n"
            "üìè –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    if not re.match(r'^[a-zA-Z0-9]+$', custom_name):
        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!</b>\n\n"
            "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: tr12, test24, promo1\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º buyer_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = settings.allowed_users.get(user.id, {}) or settings.allowed_users.get(str(user.id), {})
    buyer_id = user_info.get('buyer_id', '')
    
    if not buyer_id:
        await message.answer(
            "‚ùå <b>Buyer ID –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            parse_mode="HTML"
        )
        await state.set_state(UploadStates.waiting_notes)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö buyer_id
    try:
        user_data = await state.get_data()
        geo = user_data.get('geo')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π creative_id
        final_creative_id = generate_creative_id(geo, buyer_id, custom_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ –±–∞–∑–µ
        async with get_db_session() as session:
            stmt = select(Creative).where(Creative.creative_id == final_creative_id)
            existing = await session.execute(stmt)
            if existing.scalar_one_or_none():
                await message.answer(
                    f"‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!</b>\n\n"
                    f"üÜî –ö—Ä–µ–∞—Ç–∏–≤ —Å ID <code>{final_creative_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    f"üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                    parse_mode="HTML"
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(custom_name=custom_name)
        await state.set_state(UploadStates.waiting_notes)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="save_creative")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
        ])
        
        text = f"""
‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>

üÜî <b>ID –∫—Ä–µ–∞—Ç–∏–≤–∞:</b> <code>{final_creative_id}</code>
üìù <b>–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {custom_name}
üë§ <b>Buyer ID:</b> {buyer_id}

üí¨ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—Ä–µ–∞—Ç–∏–≤—É?</b>

üí° –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ –≤ –æ—Ç—á–µ—Ç–∞—Ö
"""
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b>\n{str(e)}\n\nüìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing custom name: {e}")
        await message.answer(
            "‚ùå <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞!</b>\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "add_notes")
async def handle_add_notes(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="save_creative")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = """
üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>

‚úçÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</b>

üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:</b>
‚Ä¢ "–ë–∞–Ω–Ω–µ—Ä —Å –ø—Ä–æ–º–æ –∞–∫—Ü–∏–µ–π 50% —Å–∫–∏–¥–∫–∏"
‚Ä¢ "–í–∏–¥–µ–æ –∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è Facebook, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"
‚Ä¢ "–¢–µ—Å—Ç–æ–≤—ã–π –∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 25-35 –ª–µ—Ç"

üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.message(UploadStates.waiting_notes)
async def handle_notes_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    notes = message.text
    
    if len(notes) > 500:
        await message.answer(
            "‚ùå <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
            f"üìè –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(notes)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ: 500 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"‚úÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(notes=notes)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤", callback_data="save_creative")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = f"""
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>

üí¨ <b>–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>
"{notes}"

‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤.
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ù–ê–ó–í–ê–ù–ò–ô =====

@router.callback_query(F.data == "custom_naming")
async def handle_custom_naming(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    user = callback.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º buyer_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id) or allowed_users.get(str(user.id))
    buyer_id = user_info.get('buyer_id', '') if user_info else ''
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è buyer_id
    if not buyer_id or not buyer_id.strip():
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω Buyer ID. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.set_state(UploadStates.waiting_notes)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="save_creative")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
        ])
        
        text = """
‚ö†Ô∏è <b>Buyer ID –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º Buyer ID.
–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.

üí¨ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—Ä–µ–∞—Ç–∏–≤—É?</b>
"""
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(UploadStates.waiting_custom_name)
    await state.update_data(buyer_id=buyer_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ", callback_data="auto_naming")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = f"""
üìù <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>

üë§ <b>–í–∞—à Buyer ID:</b> <code>{buyer_id}</code>

‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ (2-20 —Å–∏–º–≤–æ–ª–æ–≤):</b>

üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z) –∏ —Ü–∏—Ñ—Ä—ã (0-9)
‚Ä¢ –î–ª–∏–Ω–∞: 2-20 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> tr12, test24, promo01

üéØ <b>–ò—Ç–æ–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç:</b> <code>{buyer_id}–≤–∞—à–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ</code>
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "auto_naming") 
async def handle_auto_naming(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(UploadStates.waiting_notes)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="save_creative")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = """
ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>

–°–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

üí¨ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—Ä–µ–∞—Ç–∏–≤—É?</b>

–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞.
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.message(UploadStates.waiting_custom_name)
async def handle_custom_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    import re
    from bot.services.creatives import CreativesService
    
    custom_name = message.text.strip()
    user_data = await state.get_data()
    buyer_id = user_data.get('buyer_id', '')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(custom_name) < 2 or len(custom_name) > 20:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è!</b>\n\n"
            f"üìè –í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {len(custom_name)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"üìè –¢—Ä–µ–±—É–µ—Ç—Å—è: 2-20 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"‚úçÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    if not re.match(r'^[a-zA-Z0-9]+$', custom_name):
        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!</b>\n\n"
            f"üìù –í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <code>{custom_name}</code>\n"
            f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z) –∏ —Ü–∏—Ñ—Ä—ã (0-9)\n"
            f"‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã: –ø—Ä–æ–±–µ–ª—ã, —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n\n"
            f"‚úçÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    try:
        potential_id = generate_creative_id("", buyer_id, custom_name)
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è:</b>\n\n{e}\n\n‚úçÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö buyer_id  
    existing_creative = await CreativesService.get_creative_by_id(potential_id)
    if existing_creative:
        await message.answer(
            f"‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ!</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ <code>{custom_name}</code> —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n"
            f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π ID: <code>{potential_id}</code>\n\n"
            f"‚úçÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await state.update_data(custom_name=custom_name)
    await state.set_state(UploadStates.waiting_notes)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_notes")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="save_creative")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = f"""
‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>

üìù <b>–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{custom_name}</code>
üë§ <b>Buyer ID:</b> <code>{buyer_id}</code>
üéØ <b>–ò—Ç–æ–≥–æ–≤—ã–π ID:</b> <code>{potential_id}</code>

üí¨ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—Ä–µ–∞—Ç–∏–≤—É?</b>
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "save_creative")
async def handle_save_creative(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞"""
    user = callback.from_user
    user_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    geo = user_data.get('geo')
    telegram_file_id = user_data.get('telegram_file_id')
    file_name = user_data.get('file_name')
    file_size = user_data.get('file_size', 0)
    file_ext = user_data.get('file_ext', '.unknown')
    notes = user_data.get('notes', '')
    custom_name = user_data.get('custom_name')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è buyer_id
    user_info = settings.allowed_users.get(user.id, {}) or settings.allowed_users.get(str(user.id), {})
    buyer_id = user_info.get('buyer_id', '')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫—Ä–µ–∞—Ç–∏–≤–∞ (—Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
    creative_id = generate_creative_id(geo, buyer_id, custom_name)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type
    mime_type = 'application/octet-stream'  # default
    if file_ext.lower() in ['.jpg', '.jpeg']:
        mime_type = 'image/jpeg'
    elif file_ext.lower() == '.png':
        mime_type = 'image/png'
    elif file_ext.lower() == '.mp4':
        mime_type = 'video/mp4'
    elif file_ext.lower() == '.gif':
        mime_type = 'image/gif'
    
    await callback.message.edit_text("‚è≥ <b>–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–∞—Ç–∏–≤...</b>", parse_mode="HTML")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram
        bot_instance = callback.bot
        file_info = await bot_instance.get_file(telegram_file_id)
        file_io = await bot_instance.download_file(file_info.file_path)  # –ü–æ–ª—É—á–∞–µ–º io.BytesIO
        file_bytes = file_io.read()  # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑ –ø–æ—Ç–æ–∫–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ Telegram (–Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ —á–µ–º Google Drive!)
        logger.info(f"Starting Telegram file storage...")
        logger.info(f"File details: name={file_name}, size={file_size} bytes, mime={mime_type}, geo={geo}")
        
        try:
            from integrations.telegram.storage import TelegramStorageService
            
            logger.info("Initializing TelegramStorageService...")
            telegram_storage = TelegramStorageService(callback.bot)
            
            logger.info("Storing creative in Telegram...")
            stored_file_id, message_id, sha256_hash = await telegram_storage.store_creative(
                file_id=telegram_file_id,
                file_name=file_name,
                file_size=file_size,
                mime_type=mime_type,
                creative_id=creative_id,
                geo=geo
            )
            
            # Create display link
            telegram_link = telegram_storage.create_telegram_link(stored_file_id, file_name)
            
            storage_result = {
                'telegram_file_id': stored_file_id,
                'telegram_message_id': message_id,
                'telegram_link': telegram_link,
                'sha256_hash': sha256_hash
            }
            
            logger.info(f"Telegram storage SUCCESS!")
            logger.info(f"  - Telegram File ID: {stored_file_id}")
            logger.info(f"  - Message ID: {message_id}")
            logger.info(f"  - Display Link: {telegram_link}")
            logger.info(f"  - SHA256: {sha256_hash[:16]}...")
            logger.info(f"  - User: {user.first_name} ({user.id})")
            
        except Exception as telegram_error:
            logger.error(f"Telegram storage failed: {telegram_error}")
            # This shouldn't happen with Telegram, but just in case
            import hashlib
            sha256_hash = hashlib.sha256(file_bytes).hexdigest()
            
            storage_result = {
                'telegram_file_id': telegram_file_id,  # Use original file_id as fallback
                'telegram_message_id': None,
                'telegram_link': f"telegram://file/{telegram_file_id}",
                'sha256_hash': sha256_hash
            }
        
        # –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from db.models.user import User
        from db.models.creative import Creative
        from db.database import get_db_session
        from sqlalchemy import select
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º hash —Ñ–∞–π–ª–∞ –æ—Ç Telegram Storage (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω)
        sha256_hash = storage_result['sha256_hash']
        
        async with get_db_session() as session:
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stmt = select(User).where(User.tg_user_id == user.id)
            db_user = await session.execute(user_stmt)
            db_user = db_user.scalar_one_or_none()
            
            if not db_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from core.enums import UserRole
                db_user = User(
                    tg_user_id=user.id,
                    tg_username=user.username,
                    full_name=f"{user.first_name or ''} {user.last_name or ''}".strip(),
                    role=UserRole.OWNER,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                    buyer_id=buyer_id or None
                )
                session.add(db_user)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫—Ä–µ–∞—Ç–∏–≤–µ
            creative = Creative(
                creative_id=creative_id,
                geo=geo,
                telegram_file_id=storage_result['telegram_file_id'],
                telegram_message_id=storage_result['telegram_message_id'],
                uploader_user_id=db_user.id,
                uploader_buyer_id=buyer_id or None,
                original_name=file_name,
                ext=file_name.split('.')[-1].lower() if '.' in file_name else None,
                mime_type=mime_type,
                size_bytes=file_size,
                sha256=sha256_hash,
                upload_dt=datetime.utcnow(),
                notes=notes or None,
                custom_name=custom_name or None
            )
            
            session.add(creative)
            await session.commit()
        
        logger.info(f"Creative {creative_id} saved successfully for user {user.id} (using Telegram storage)")
        
        # –î—É–±–ª–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤ –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è
        try:
            from bot.services.creative_duplicator import CreativeDuplicatorService
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ MIME type
            file_type = "document"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if mime_type.startswith('image/'):
                if file_ext.lower() == '.gif':
                    file_type = "animation"
                else:
                    file_type = "photo"
            elif mime_type.startswith('video/'):
                file_type = "video"
            
            # –î—É–±–ª–∏—Ä—É–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            dup_success, dup_message_id, dup_error = await CreativeDuplicatorService.duplicate_with_retry(
                bot=callback.bot,
                creative_id=creative_id,
                file_id=telegram_file_id,
                file_type=file_type,
                geo=geo,
                uploader_name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                uploader_username=user.username,
                uploader_id=user.id,
                buyer_id=buyer_id,
                notes=notes,
                custom_name=custom_name,
                file_name=file_name,
                file_size=file_size
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î
            if dup_success:
                logger.info(f"‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ {creative_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è (message_id: {dup_message_id})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                async with get_db_session() as session:
                    from sqlalchemy import update
                    stmt = update(Creative).where(Creative.creative_id == creative_id).values(
                        is_duplicated=True,
                        duplicated_at=datetime.utcnow(),
                        duplication_message_id=dup_message_id
                    )
                    await session.execute(stmt)
                    await session.commit()
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ {creative_id} –≤ creo_storage_bot: {dup_error}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
                async with get_db_session() as session:
                    from sqlalchemy import update
                    stmt = update(Creative).where(Creative.creative_id == creative_id).values(
                        is_duplicated=False,
                        duplication_error=dup_error[:500] if dup_error else None  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—à–∏–±–∫–∏
                    )
                    await session.execute(stmt)
                    await session.commit()
                
        except Exception as dup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞ {creative_id}: {dup_error}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏
        naming_info = ""
        if custom_name:
            naming_info = f"üìù <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {custom_name}\n"
        else:
            naming_info = f"ü§ñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ\n"
        
        success_text = f"""
üéâ <b>–ö—Ä–µ–∞—Ç–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>

üÜî <b>ID –∫—Ä–µ–∞—Ç–∏–≤–∞:</b> <code>{creative_id}</code>
üåç <b>–ì–ï–û:</b> {geo}
{naming_info}üìÑ <b>–§–∞–π–ª:</b> {file_name}
üìè <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.0f} –ö–ë
üë§ <b>–ó–∞–≥—Ä—É–∂–µ–Ω:</b> {user.first_name}
üè∑ <b>Buyer ID:</b> {buyer_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {notes or '–Ω–µ—Ç'}

‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!

üí° <b>–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> /upload
"""
        
        await callback.message.edit_text(success_text, parse_mode="HTML")
        
        logger.info(f"Creative {creative_id} saved successfully by user {user.id}")
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        logger.error(f"Error saving creative: {e}")
        logger.error(f"Full traceback: {error_details}")
        
        error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')[:100]
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞!</b>\n\n"
            f"üîß –î–µ—Ç–∞–ª–∏: {error_msg}...\n"
            f"üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
            parse_mode="HTML"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "add_custom_geo")
async def handle_add_custom_geo(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ì–ï–û"""
    await state.set_state(UploadStates.waiting_custom_geo)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ì–ï–û", callback_data="back_to_geo_selection")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
    ])
    
    text = """
‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ì–ï–û</b>

üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ì–ï–û —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</b>

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>KZ</code> - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
‚Ä¢ <code>BY</code> - –ë–µ–ª–∞—Ä—É—Å—å  
‚Ä¢ <code>UA</code> - –£–∫—Ä–∞–∏–Ω–∞
‚Ä¢ <code>MD</code> - –ú–æ–ª–¥–æ–≤–∞

‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
‚Ä¢ –î–ª–∏–Ω–∞: 2-4 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –¢–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã

‚ö†Ô∏è <b>–ö–æ–¥ –ì–ï–û –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.message(UploadStates.waiting_custom_geo)
async def handle_custom_geo_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ì–ï–û"""
    geo_code = message.text.strip().upper()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not geo_code.isalpha() or len(geo_code) < 2 or len(geo_code) > 4:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ì–ï–û!</b>\n\n"
            "‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n"
            "‚Ä¢ –î–ª–∏–Ω–∞: 2-4 —Å–∏–º–≤–æ–ª–∞\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> KZ, BY, UA, MD\n\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ì–ï–û
    all_geos = await get_all_geos()
    if geo_code in all_geos:
        await message.answer(
            f"‚ö†Ô∏è <b>–ì–ï–û –∫–æ–¥ {geo_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
            f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ì–ï–û.",
            parse_mode="HTML"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ì–ï–û
    logger.error(f"üîß CUSTOM GEO: User {message.from_user.id} attempting to add new GEO: {geo_code}")
    
    if await save_custom_geo(geo_code):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ì–ï–û –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
        await state.update_data(geo=geo_code)
        await state.set_state(UploadStates.waiting_file)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ì–ï–û", callback_data="change_geo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")]
        ])
        
        text = f"""
‚úÖ <b>–ù–æ–≤—ã–π –ì–ï–û –¥–æ–±–∞–≤–ª–µ–Ω!</b>

‚≠ê <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ì–ï–û:</b> {geo_code}
üåç <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ì–ï–û:</b> {geo_code}

üìé <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>

‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF, WEBP
‚Ä¢ üé¨ –í–∏–¥–µ–æ: MP4, MOV

üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑

üí° <b>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</b>
"""
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
        logger.error(f"‚úÖ CUSTOM GEO SUCCESS: User {message.from_user.id} successfully added custom GEO: {geo_code}")
        
    else:
        logger.error(f"‚ùå CUSTOM GEO FAILED: User {message.from_user.id} failed to add custom GEO: {geo_code}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ì–ï–û!</b>\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "back_to_geo_selection")
async def handle_back_to_geo_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ì–ï–û –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    await handle_change_geo(callback, state)

@router.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""
    from bot.services.subscription_checker import SubscriptionChecker
    
    user = callback.from_user
    
    logger.info(f"üîÑ SUBSCRIPTION RECHECK: User {user.id} requested subscription recheck")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await SubscriptionChecker.is_user_subscribed(callback.bot, user.id)
    
    if is_subscribed:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ
        logger.info(f"‚úÖ SUBSCRIPTION RECHECK: User {user.id} subscription confirmed")
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ì–ï–û
        all_geos = await get_all_geos()
        buttons = []
        for i in range(0, len(all_geos), 4):
            row = []
            for geo in all_geos[i:i+4]:
                row.append(InlineKeyboardButton(text=geo, callback_data=f"geo_{geo}"))
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ì–ï–û
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ì–ï–û", callback_data="add_custom_geo")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="upload_cancel")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –ì–ï–û –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞:</b>\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –ì–ï–û: {len(all_geos)}\n\n"
            "üí° –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –ì–ï–û –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(UploadStates.waiting_geo)
        
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
        logger.info(f"‚ùå SUBSCRIPTION RECHECK: User {user.id} subscription NOT found")
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É", show_alert=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await SubscriptionChecker.get_channel_info(callback.bot)
        channel_link = SubscriptionChecker.get_channel_link()
        
        channel_name = channel_info.get('title', '–ö–∞–Ω–∞–ª') if channel_info else '–ö–∞–Ω–∞–ª'
        
        text = f"""
üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
üì¢ <b>{channel_name}</b>

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
        
        buttons = []
        
        if channel_link:
            buttons.append([InlineKeyboardButton(
                text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                url=channel_link
            )])
        
        buttons.append([InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_subscription"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "upload_cancel")
async def handle_upload_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "üí° –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /upload",
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

