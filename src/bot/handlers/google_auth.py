"""
Google Drive OAuth authorization handlers for Telegram bot
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import aiohttp

import sys
from pathlib import Path

# Add project root to Python path for imports
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

from core.config import settings
from db.database import get_db_session
from db.models.user import User
from sqlalchemy import select

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("google_auth"))
async def cmd_google_auth(message: Message):
    """Command to start Google Drive authorization"""
    user = message.from_user
    
    # Check if user has access
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id)
    
    if not user_info:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # Check current authorization status
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{settings.google_oauth_redirect_uri.replace('/auth/google/callback', '')}/auth/google/status",
                params={'user_id': str(user.id)}
            ) as resp:
                if resp.status == 200:
                    status_data = await resp.json()
                    
                    if status_data.get('authorized') and not status_data.get('expired'):
                        await message.answer(
                            "‚úÖ <b>Google Drive —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!</b>\\n\\n"
                            "üóÇ –í–∞—à–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ Google Drive.\\n"
                            "üìÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: " + status_data.get('expires_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            parse_mode="HTML"
                        )
                        return
    except Exception as e:
        logger.warning(f"Could not check auth status: {e}")
    
    # Start authorization process
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Google Drive", callback_data=f"start_google_auth_{user.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_auth")]
    ])
    
    text = f"""
üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üìÅ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤ Google Drive –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ Google Drive
‚Ä¢ –¢–æ–∫–µ–Ω—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ  
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Google

‚ö° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∞—à Google Drive
‚Ä¢ –†–∞–±–æ—á–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º GEO

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    logger.info(f"User {user.id} requested Google Drive authorization")

@router.callback_query(F.data.startswith("start_google_auth_"))
async def handle_start_google_auth(callback: CallbackQuery):
    """Handle Google OAuth start"""
    user_id = callback.data.split("_")[-1]
    
    if str(callback.from_user.id) != user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return
    
    try:
        # Request auth URL from OAuth server
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{settings.google_oauth_redirect_uri.replace('/auth/google/callback', '')}/auth/google/start",
                params={'user_id': user_id}
            ) as resp:
                if resp.status == 200:
                    auth_data = await resp.json()
                    auth_url = auth_data['auth_url']
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîê –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", url=auth_url)],
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_auth_status_{user_id}")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_auth")]
                    ])
                    
                    text = f"""
üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive</b>

‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞!

üåê <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîê –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
2. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Drive
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
–°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä.
"""
                    
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                    await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
                    
                else:
                    error_data = await resp.json()
                    await callback.message.edit_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\\n\\n"
                        f"üîß –î–µ—Ç–∞–ª–∏: {error_data.get('error', 'Unknown error')}",
                        parse_mode="HTML"
                    )
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞")
                    
    except Exception as e:
        logger.error(f"Error starting Google auth: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\\n\\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@router.callback_query(F.data.startswith("check_auth_status_"))
async def handle_check_auth_status(callback: CallbackQuery):
    """Check Google OAuth status"""
    user_id = callback.data.split("_")[-1]
    
    if str(callback.from_user.id) != user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{settings.google_oauth_redirect_uri.replace('/auth/google/callback', '')}/auth/google/status",
                params={'user_id': user_id}
            ) as resp:
                if resp.status == 200:
                    status_data = await resp.json()
                    
                    if status_data.get('authorized') and not status_data.get('expired'):
                        # Successfully authorized
                        await callback.message.edit_text(
                            "‚úÖ <b>Google Drive —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!</b>\\n\\n"
                            "üóÇ –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ Google Drive\\n"
                            f"üìÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {status_data.get('expires_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\\n\\n"
                            "üí° –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã —á–µ—Ä–µ–∑ /upload",
                            parse_mode="HTML"
                        )
                        await callback.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        
                    else:
                        # Not yet authorized
                        await callback.answer("‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
                        
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
                    
    except Exception as e:
        logger.error(f"Error checking auth status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@router.callback_query(F.data == "cancel_auth")
async def handle_cancel_auth(callback: CallbackQuery):
    """Cancel Google OAuth"""
    await callback.message.edit_text(
        "‚ùå <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\\n\\n"
        "üí° –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Drive –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /google_auth",
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")