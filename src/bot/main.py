import asyncio
import logging
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# Add project root to Python path for imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.config import settings
from db.database import engine
from db.models import Base
from bot.handlers import reports, admin, upload, google_auth

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=settings.telegram_bot_token)
dp = Dispatcher(storage=MemoryStorage())

# Register routers
dp.include_router(reports.router)
dp.include_router(admin.router)
dp.include_router(upload.router)
dp.include_router(google_auth.router)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    user = message.from_user
    logger.info(f"Received /start from user {user.id} ({user.username})")
    
    # Check if user is in whitelist
    allowed_users = settings.allowed_users
    user_info = allowed_users.get(user.id) or allowed_users.get(str(user.id))
    
    if not user_info:
        logger.info(f"Unregistered user {user.id} ({user.username}) accessed /start")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        from bot.handlers.admin import load_pending_users
        pending = load_pending_users()
        
        if user.id in pending:
            await message.answer(
                "‚è≥ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**\n\n"
                f"üÜî –í–∞—à ID: `{user.id}`\n"
                "üìù –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n\n"
                "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**\n\n"
                "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                f"üÜî **–í–∞—à Telegram ID:** `{user.id}`\n\n"
                "üìù **–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
                "/register - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
                "‚ú® –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!",
                parse_mode="Markdown"
            )
        return
    
    role = user_info.get('role', 'unknown')
    buyer_id = user_info.get('buyer_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    
    role_names = {
        'owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
        'head': '–•–µ–¥ –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞',
        'teamlead': '–¢–∏–º–ª–∏–¥',
        'buyer': '–ú–µ–¥–∏–∞–±–∞–µ—Ä',
        'bizdev': '–ë–∏–∑–Ω–µ—Å-–¥–µ–≤',
        'finance': '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç'
    }
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Ö–µ–¥–∞
    admin_commands = ""
    if role in ['owner', 'head', 'teamlead']:
        admin_commands = """
üîß <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>
/manage_users - üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∫–Ω–æ–ø–∫–∏)
/pending - üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
/admin - üìñ –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
"""
    
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - Team Creative Manager Bot.
–ü–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ –¥–ª—è –º–µ–¥–∏–∞–±–∞–∏–Ω–≥–∞.

üÜî –í–∞—à ID: {user.id}
üë§ –†–æ–ª—å: {role_names.get(role, role) if user_info else '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
üè∑ Buyer ID: {buyer_id}

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/reports - üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ (–Ω–æ–≤–∞—è!)
/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤
/google_auth - üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive
/stats_creo - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
/stats_buyer - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–µ—Ä–∞–º
/stats_geo_offer - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GEO/–æ—Ñ—Ñ–µ—Ä–æ–≤
/my_creos - –ú–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã
/export - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
/help - –ü–æ–º–æ—â—å{admin_commands}

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reports
"""
    
    await message.answer(welcome_text, parse_mode="HTML")
    logger.info(f"User {user.id} ({user.username}) started the bot with role {role}")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = """
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/upload - –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, MP4, MOV
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID

/stats_creo - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º
  ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã: –ø–µ—Ä–∏–æ–¥, GEO, –æ—Ñ—Ñ–µ—Ä, –±–∞–µ—Ä
  ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: –∫–ª–∏–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–µ–ø–æ–∑–∏—Ç—ã

/stats_buyer - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–µ—Ä–∞–º
  ‚Ä¢ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–µ—Ä–∞–º
  ‚Ä¢ –¢–æ–ø –∫—Ä–µ–∞—Ç–∏–≤—ã –∫–∞–∂–¥–æ–≥–æ –±–∞–µ—Ä–∞

/stats_geo_offer - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ GEO –∏ –æ—Ñ—Ñ–µ—Ä–∞–º
  ‚Ä¢ –°—Ä–µ–∑—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä–æ–≤

/my_creos - –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã
  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
  ‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

/export - –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
  ‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: CSV, XLSX
  ‚Ä¢ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_support
"""
    
    await message.answer(help_text)


async def load_users_from_database():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        from db.database import get_db_session
        from db.models.user import User
        from sqlalchemy import select
        from core.enums import UserRole
        
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            result = await session.execute(select(User))
            db_users = result.scalars().all()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç settings
            users = {}
            for user in db_users:
                users[str(user.tg_user_id)] = {
                    'role': user.role.value,
                    'buyer_id': user.buyer_id or '',
                    'username': user.tg_username or '',
                    'first_name': user.full_name or '',
                    'is_approved': user.is_active
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ALLOWED_USERS (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            env_users = settings.allowed_users.copy() if hasattr(settings, 'allowed_users') and settings.allowed_users else {}
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ENV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (ENV –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            for env_user_id, env_user_data in env_users.items():
                users[str(env_user_id)] = env_user_data
            
            settings.allowed_users = users
            logger.info(f"Loaded {len(users)} users from database + ENV (ENV users have priority)")
            logger.info(f"Loaded users: {list(users.keys())}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–æ–±—â–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞–∫ fallback
            if not users:
                from bot.handlers.admin import load_users
                file_users = load_users()
                if file_users:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
                    await sync_file_users_to_database(session, file_users)
                    settings.allowed_users = file_users
                    logger.info(f"Migrated {len(file_users)} users from file to database")
                
    except Exception as e:
        logger.warning(f"Failed to load users from database: {e}")
        # Fallback –∫ —Ñ–∞–π–ª—É
        try:
            from bot.handlers.admin import load_users
            users = load_users()
            settings.allowed_users = users
            logger.info(f"Loaded {len(users)} users from file (fallback)")
        except Exception as file_error:
            logger.error(f"Failed to load users from file fallback: {file_error}")

async def sync_file_users_to_database(session, file_users):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    from db.models.user import User
    from sqlalchemy import select
    
    for tg_id, user_data in file_users.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.tg_user_id == int(tg_id)))
        existing_user = result.scalar_one_or_none()
        
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                tg_user_id=int(tg_id),
                tg_username=user_data.get('username', ''),
                full_name=user_data.get('first_name', ''),
                role=UserRole(user_data.get('role', 'buyer')),
                buyer_id=user_data.get('buyer_id') if user_data.get('buyer_id') else None,
                is_active=user_data.get('is_approved', True)
            )
            session.add(new_user)
    
    await session.commit()

async def on_startup():
    """Startup tasks"""
    logger.info("Starting bot...")
    
    # Load users from database
    await load_users_from_database()
    
    # Create database tables
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("Database initialized successfully!")
    except Exception as e:
        logger.warning(f"Database initialization failed: {e}")
        logger.info("Bot will continue without database features")
    
    logger.info("Bot started successfully!")


async def on_shutdown():
    """Shutdown tasks"""
    logger.info("Shutting down bot...")
    await bot.session.close()
    await engine.dispose()


async def main():
    """Main function"""
    # Register startup and shutdown hooks
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # Start polling
    try:
        logger.info("Starting polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Error occurred: {e}")


if __name__ == "__main__":
    asyncio.run(main())