"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional, Dict, Any
from core.enums import ReportPeriod


class ReportsKeyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤"""
    
    @staticmethod
    def main_reports_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(
                text="üìä Dashboard –°–≤–æ–¥–∫–∞", 
                callback_data="reports_dashboard"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üë• –û—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä–∞–º", 
                callback_data="reports_buyers"
            ),
            InlineKeyboardButton(
                text="üåç –û—Ç—á–µ—Ç –ø–æ –ì–ï–û", 
                callback_data="reports_geo"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üé® –û—Ç—á–µ—Ç –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º", 
                callback_data="reports_creatives"
            ),
            InlineKeyboardButton(
                text="üéØ –û—Ç—á–µ—Ç –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º", 
                callback_data="reports_offers"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def period_selection(report_type: str, traffic_source: str = None, back_data: str = None) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        builder = InlineKeyboardBuilder()
        
        periods = [
            ("üìÖ –°–µ–≥–æ–¥–Ω—è", "today"),
            ("üìÖ –í—á–µ—Ä–∞", "yesterday"),
            ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", "last3days"),
            ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "last7days"),
            ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π", "last15days"),
            ("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "thismonth"),
            ("üìÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "lastmonth")
        ]
        
        for text, period in periods:
            if traffic_source:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
                callback_data = f"period_{report_type}_{traffic_source}_{period}"
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                callback_data = f"period_{report_type}_{period}"
                
            builder.row(
                InlineKeyboardButton(
                    text=text,
                    callback_data=callback_data
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if back_data:
            back_callback = back_data
        elif traffic_source:
            # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
            back_callback = f"trafficsrc_{report_type}"
        else:
            # –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
            back_callback = "reports_main"
            
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=back_callback
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def traffic_source_selection(report_type: str) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        builder = InlineKeyboardBuilder()
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        builder.row(
            InlineKeyboardButton(
                text="üîç Google",
                callback_data=f"trafficsrc_{report_type}_google"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üì± FB",
                callback_data=f"trafficsrc_{report_type}_fb"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="reports_main"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def buyers_filters(period: str, traffic_source: str = None, breadcrumbs: str = "") -> InlineKeyboardMarkup:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–π–µ—Ä–∞–º"""
        builder = InlineKeyboardBuilder()
        
        bc = f"_{breadcrumbs}" if breadcrumbs else ""
        ts = f"_{traffic_source}" if traffic_source else ""
        
        builder.row(
            InlineKeyboardButton(
                text="üë• –í—Å–µ –±–∞–π–µ—Ä—ã",
                callback_data=f"buyers_all_{period}{ts}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üéØ –í—ã–±—Ä–∞—Ç—å –±–∞–π–µ—Ä–∞",
                callback_data=f"buyers_select_{period}{ts}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üåê –í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫",
                callback_data=f"buyers_traffic_{period}{ts}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üåç –í —Ä–∞–∑—Ä–µ–∑–µ –ì–ï–û",
                callback_data=f"buyers_geo_{period}{ts}{bc}"
            ),
            InlineKeyboardButton(
                text="üéØ –í —Ä–∞–∑—Ä–µ–∑–µ –æ—Ñ—Ñ–µ—Ä–æ–≤",
                callback_data=f"buyers_offers_{period}{ts}{bc}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if traffic_source:
            back_callback = f"trafficsrc_buyers_{traffic_source}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        else:
            back_callback = "reports_buyers"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=back_callback
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def geo_filters(period: str, breadcrumbs: str = "") -> InlineKeyboardMarkup:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ì–ï–û"""
        builder = InlineKeyboardBuilder()
        
        bc = f"_{breadcrumbs}" if breadcrumbs else ""
        
        builder.row(
            InlineKeyboardButton(
                text="üåç –í—Å–µ –ì–ï–û",
                callback_data=f"geo_all_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üéØ –í—ã–±—Ä–∞—Ç—å –ì–ï–û",
                callback_data=f"geo_select_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üë• –ü–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º",
                callback_data=f"geo_allbuyers_{period}{bc}"
            ),
            InlineKeyboardButton(
                text="üéØ –í—ã–±—Ä–∞—Ç—å –±–∞–π–µ—Ä–∞",
                callback_data=f"geo_selectbuyer_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="period_geo"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def creatives_filters(period: str, breadcrumbs: str = "") -> InlineKeyboardMarkup:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º"""
        builder = InlineKeyboardBuilder()
        
        bc = f"_{breadcrumbs}" if breadcrumbs else ""
        
        builder.row(
            InlineKeyboardButton(
                text="üåç –ü–æ –≤—Å–µ–º –ì–ï–û",
                callback_data=f"creatives_allgeo_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üéØ –í—ã–±—Ä–∞—Ç—å –ì–ï–û",
                callback_data=f"creatives_selectgeo_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="period_creatives"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def offers_filters(period: str, breadcrumbs: str = "") -> InlineKeyboardMarkup:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
        builder = InlineKeyboardBuilder()
        
        bc = f"_{breadcrumbs}" if breadcrumbs else ""
        
        builder.row(
            InlineKeyboardButton(
                text="üåç –ü–æ –≤—Å–µ–º –ì–ï–û",
                callback_data=f"offers_allgeo_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üéØ –í—ã–±—Ä–∞—Ç—å –ì–ï–û",
                callback_data=f"offers_selectgeo_{period}{bc}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="period_offers"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def dynamic_selection_list(
        items: List[Dict[str, Any]], 
        callback_prefix: str,
        selected_items: List[str] = None,
        back_callback: str = None,
        max_columns: int = 2
    ) -> InlineKeyboardMarkup:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        builder = InlineKeyboardBuilder()
        selected = selected_items or []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        for i in range(0, len(items), max_columns):
            row_items = items[i:i + max_columns]
            row_buttons = []
            
            for item in row_items:
                item_id = item.get('id', item.get('name', str(item)))
                text = item.get('display_name', item.get('name', str(item)))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
                if item_id in selected:
                    text = f"‚úÖ {text}"
                
                row_buttons.append(
                    InlineKeyboardButton(
                        text=text,
                        callback_data=f"{callback_prefix}_{item_id}"
                    )
                )
            
            builder.row(*row_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if selected:
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data=f"{callback_prefix}_apply"
                ),
                InlineKeyboardButton(
                    text="üóë –û—á–∏—Å—Ç–∏—Ç—å",
                    callback_data=f"{callback_prefix}_clear"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if back_callback:
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=back_callback
                )
            )
        
        return builder.as_markup()
    
    @staticmethod
    def breadcrumbs_navigation(breadcrumbs: List[Dict[str, str]]) -> InlineKeyboardMarkup:
        """–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏"""
        if not breadcrumbs:
            return None
            
        builder = InlineKeyboardBuilder()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        for i, crumb in enumerate(breadcrumbs):
            if i == len(breadcrumbs) - 1:
                # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
                continue
            
            builder.add(
                InlineKeyboardButton(
                    text=crumb['text'],
                    callback_data=crumb['callback']
                )
            )
        
        return builder.as_markup() if len(builder.buttons) > 0 else None
    
    @staticmethod
    def report_actions(report_type: str, filters: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–æ–º (–æ–±–Ω–æ–≤–∏—Ç—å, —ç–∫—Å–ø–æ—Ä—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"""
        builder = InlineKeyboardBuilder()
        
        # –£–ø—Ä–æ—â–∞–µ–º callback data —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤ 64 —Å–∏–º–≤–æ–ª–∞
        # –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ JSON –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        period = filters.get('period', 'yesterday')
        report_subtype = filters.get('type', 'all')
        
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"refresh_{report_type}_{period}"
            ),
            InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª–∏",
                callback_data=f"details_{report_type}_{report_subtype}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö —Ñ–∏–ª—å—Ç—Ä–∞–º",
                callback_data=f"filters_{report_type}"
            ),
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–∞—è",
                callback_data="reports_main"
            )
        )
        
        return builder.as_markup()