"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
"""

import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from bot.services.subscription_checker import SubscriptionChecker
from core.config import settings

logger = logging.getLogger(__name__)


class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""

    def __init__(self):
        super().__init__()

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if not settings.required_channel_id:
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = event.from_user
        if not user:
            return await handler(event, data)
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
        if isinstance(event, Message) and event.text and event.text.startswith('/start'):
            return await handler(event, data)
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è callback'–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        if isinstance(event, CallbackQuery) and event.data and event.data.startswith('check_subscription'):
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏
        should_check = False
        if isinstance(event, Message):
            if event.text and event.text.startswith('/upload'):
                should_check = True
        elif isinstance(event, CallbackQuery):
            if event.data and ('geo_' in event.data or 'upload' in event.data):
                should_check = True
                
        if not should_check:
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        bot = data.get('bot')
        if not bot:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = await SubscriptionChecker.is_user_subscribed(bot, user.id)
        
        if not is_subscribed:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = await SubscriptionChecker.get_channel_info(bot)
            channel_link = SubscriptionChecker.get_channel_link()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            channel_name = channel_info.get('title', '–ö–∞–Ω–∞–ª') if channel_info else '–ö–∞–Ω–∞–ª'
            
            text = f"""
üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
üì¢ <b>{channel_name}</b>

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            buttons = []
            
            if channel_link:
                buttons.append([InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=channel_link
                )])
            
            buttons.append([InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_subscription"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            if isinstance(event, Message):
                await event.answer(text, reply_markup=keyboard, parse_mode="HTML")
            elif isinstance(event, CallbackQuery):
                await event.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                await event.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
            
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handler'–∞
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return await handler(event, data)