"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è
"""

import logging
from typing import Optional
from datetime import datetime
from aiogram import Bot
from aiogram.types import Message

from core.config import settings

logger = logging.getLogger(__name__)


class CreativeDuplicatorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    
    @staticmethod
    async def duplicate_creative(
        bot: Bot,
        creative_id: str,
        file_id: str,
        file_type: str,  # "photo", "video", "animation", "document"
        geo: str,
        uploader_name: str,
        uploader_username: Optional[str],
        uploader_id: int,
        buyer_id: Optional[str],
        notes: Optional[str],
        custom_name: Optional[str],
        file_name: str,
        file_size: int
    ) -> tuple[bool, Optional[str], Optional[str]]:
        """
        –î—É–±–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤ –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
            creative_id: ID –∫—Ä–µ–∞—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: IDUS131225001)
            file_id: Telegram file_id
            file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ (photo/video/animation/document)
            geo: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω
            uploader_name: –ò–º—è –∑–∞–≥—Ä—É–∑–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            uploader_username: Username –∑–∞–≥—Ä—É–∑–∏–≤—à–µ–≥–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            uploader_id: Telegram ID –∑–∞–≥—Ä—É–∑–∏–≤—à–µ–≥–æ
            buyer_id: Buyer ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            notes: –û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            custom_name: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            file_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_size: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            tuple: (success: bool, message_id: Optional[str], error: Optional[str])
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if not settings.creative_storage_channel_id:
            logger.info("–ö–∞–Ω–∞–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return (True, None, None)  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            caption_parts = [
                f"üé® <b>–ù–æ–≤—ã–π –∫—Ä–µ–∞—Ç–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>",
                "",
                f"üÜî <b>ID –∫—Ä–µ–∞—Ç–∏–≤–∞:</b> <code>{creative_id}</code>",
                f"üåç <b>–ì–ï–û:</b> {geo}",
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏
            if custom_name:
                caption_parts.append(f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {custom_name}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = f"üë§ <b>–ó–∞–≥—Ä—É–∑–∏–ª:</b> {uploader_name}"
            if uploader_username:
                user_info += f" (@{uploader_username})"
            user_info += f" (ID: {uploader_id})"
            caption_parts.append(user_info)
            
            # Buyer ID –µ—Å–ª–∏ –µ—Å—Ç—å
            if buyer_id:
                caption_parts.append(f"üè∑ <b>Buyer ID:</b> {buyer_id}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            caption_parts.extend([
                f"üìÑ <b>–§–∞–π–ª:</b> {file_name}",
                f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.0f} –ö–ë",
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')} MSK"
            ])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if notes:
                caption_parts.extend([
                    "",
                    f"üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {notes}"
                ])
            
            # –•–µ—à—Ç–µ–≥–∏
            caption_parts.extend([
                "",
                f"#–∫—Ä–µ–∞—Ç–∏–≤ #{geo} #–∑–∞–≥—Ä—É–∂–µ–Ω"
            ])
            if buyer_id:
                caption_parts.append(f"#{buyer_id}")
            
            caption = "\n".join(caption_parts)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ caption - 1024 —Å–∏–º–≤–æ–ª–∞
            if len(caption) > 1020:
                caption = caption[:1017] + "..."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            message: Optional[Message] = None
            
            if file_type == "photo":
                message = await bot.send_photo(
                    chat_id=settings.creative_storage_channel_id,
                    photo=file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif file_type == "video":
                message = await bot.send_video(
                    chat_id=settings.creative_storage_channel_id,
                    video=file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif file_type == "animation":
                message = await bot.send_animation(
                    chat_id=settings.creative_storage_channel_id,
                    animation=file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            else:  # document
                message = await bot.send_document(
                    chat_id=settings.creative_storage_channel_id,
                    document=file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            
            if message:
                logger.info(f"‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ {creative_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è (message_id: {message.message_id})")
                return (True, str(message.message_id), None)
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ {creative_id} –≤ –∫–∞–Ω–∞–ª")
                return (False, None, "Message not sent")
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞ {creative_id}: {e}")
            return (False, None, str(e))
    
    @staticmethod
    async def duplicate_with_retry(
        bot: Bot,
        creative_id: str,
        file_id: str,
        file_type: str,
        geo: str,
        uploader_name: str,
        uploader_username: Optional[str],
        uploader_id: int,
        buyer_id: Optional[str],
        notes: Optional[str],
        custom_name: Optional[str],
        file_name: str,
        file_size: int,
        max_retries: int = 3
    ) -> tuple[bool, Optional[str], Optional[str]]:
        """
        –î—É–±–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ duplicate_creative)
            
        Returns:
            tuple: (success: bool, message_id: Optional[str], error: Optional[str])
        """
        
        last_error = None
        for attempt in range(max_retries):
            success, message_id, error = await CreativeDuplicatorService.duplicate_creative(
                bot=bot,
                creative_id=creative_id,
                file_id=file_id,
                file_type=file_type,
                geo=geo,
                uploader_name=uploader_name,
                uploader_username=uploader_username,
                uploader_id=uploader_id,
                buyer_id=buyer_id,
                notes=notes,
                custom_name=custom_name,
                file_name=file_name,
                file_size=file_size
            )
            
            if success:
                return (True, message_id, None)
            
            last_error = error
            
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞ {creative_id}")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                import asyncio
                await asyncio.sleep(1)
        
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ {creative_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        return (False, None, last_error)