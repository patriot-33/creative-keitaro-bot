#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–æ–≤ TR32 –∑–∞ –ø–µ—Ä–∏–æ–¥ 06.08.25-10.08.25"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime, timedelta

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from integrations.keitaro.client import KeitaroClient

async def analyze_tr32_clicks():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏ TR32 –∑–∞ 06.08.25-10.08.25"""
    
    print("üîç TR32 CLICKS ANALYSIS")
    print("=" * 80)
    
    async with KeitaroClient() as client:
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞–µ–º Google)
        traffic_sources = await client.get_traffic_sources()
        non_google_ids = [str(ts['id']) for ts in traffic_sources if ts['id'] != 2]
        
        # –ü–µ—Ä–∏–æ–¥ —Ç–æ—á–Ω–æ –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª: 06.08.25-10.08.25
        start_date = '2025-08-06 00:00:00'
        end_date = '2025-08-10 23:59:59'
        
        print(f"üìÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∞: {start_date} - {end_date}")
        print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ (–Ω–µ Google): {non_google_ids}")
        print("-" * 60)
        
        # –ó–ê–ü–†–û–° 1: –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TR32 –ø–æ —á–∞—Å–∞–º
        detailed_params = {
            'metrics': ['clicks'],
            'columns': ['sub_id_4', 'datetime'],
            'filters': [
                {
                    'name': 'datetime',
                    'operator': 'BETWEEN',
                    'expression': [start_date, end_date]
                },
                {
                    'name': 'sub_id_4',
                    'operator': 'EQUALS',
                    'expression': 'tr32'
                },
                {
                    'name': 'ts_id',
                    'operator': 'IN_LIST',
                    'expression': non_google_ids
                }
            ],
            'grouping': ['sub_id_4', 'datetime'],
            'limit': 10000
        }
        
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TR32...")
        detailed_data = await client._make_request('/admin_api/v1/report/build', method='POST', json=detailed_params)
        
        if not detailed_data or 'rows' not in detailed_data:
            print("‚ùå –ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        daily_breakdown = {}
        hourly_data = []
        
        for row in detailed_data['rows']:
            datetime_str = row.get('datetime', '')
            clicks = int(row.get('clicks', 0))
            
            if datetime_str and clicks > 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                date_part = datetime_str.split('T')[0] if 'T' in datetime_str else datetime_str.split(' ')[0]
                
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
                if date_part not in daily_breakdown:
                    daily_breakdown[date_part] = 0
                daily_breakdown[date_part] += clicks
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                hourly_data.append({
                    'datetime': datetime_str,
                    'date': date_part,
                    'clicks': clicks
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(detailed_data['rows'])} —Å—Ç—Ä–æ–∫ –¥–ª—è TR32")
        print()
        
        # DAILY SUMMARY
        print("üìä TR32 –ö–õ–ò–ö–ò –ü–û –î–ù–Ø–ú:")
        print("-" * 50)
        total_clicks = 0
        active_days = 0
        
        for date in sorted(daily_breakdown.keys()):
            clicks = daily_breakdown[date]
            total_clicks += clicks
            is_active = clicks >= 10
            if is_active:
                active_days += 1
            status = "üü¢ –ê–ö–¢–ò–í–ù–´–ô" if is_active else "üî¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            print(f"{date}: {clicks:3d} –∫–ª–∏–∫–æ–≤ - {status}")
        
        print("-" * 50)
        print(f"–ò–¢–û–ì–û: {total_clicks} –∫–ª–∏–∫–æ–≤ –∑–∞ {len(daily_breakdown)} –¥–Ω–µ–π")
        print(f"–ê–ö–¢–ò–í–ù–´–• –î–ù–ï–ô (10+): {active_days}")
        print()
        
        # HOURLY BREAKDOWN for each day
        print("‚è∞ –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–ß–ê–°–û–í–û–ô –†–ê–ó–ë–û–†:")
        print("=" * 60)
        
        for date in sorted(daily_breakdown.keys()):
            print(f"\nüìÖ {date} (–≤—Å–µ–≥–æ: {daily_breakdown[date]} –∫–ª–∏–∫–æ–≤):")
            day_hours = [h for h in hourly_data if h['date'] == date]
            day_hours.sort(key=lambda x: x['datetime'])
            
            for hour_data in day_hours:
                time_part = hour_data['datetime'].split('T')[1] if 'T' in hour_data['datetime'] else hour_data['datetime'].split(' ')[1]
                print(f"  {time_part}: {hour_data['clicks']} –∫–ª–∏–∫–æ–≤")
        
        print()
        print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ù–ò–Ø–ú–ò:")
        print("-" * 40)
        your_expectations = {
            '2025-08-10': 51,
            '2025-08-09': 98, 
            '2025-08-08': 85,
            '2025-08-07': 88
        }
        
        for date, expected in your_expectations.items():
            actual = daily_breakdown.get(date, 0)
            diff = actual - expected
            symbol = "üìà" if diff > 0 else "üìâ" if diff < 0 else "üü∞"
            print(f"{date}: –æ–∂–∏–¥–∞–ª {expected:3d}, –ø–æ–ª—É—á–∏–ª {actual:3d} ({diff:+3d}) {symbol}")
        
        # Check if we have data for 2025-08-06 (which you didn't expect)
        if '2025-08-06' in daily_breakdown:
            print(f"2025-08-06: –ù–ï –æ–∂–∏–¥–∞–ª, –Ω–æ –µ—Å—Ç—å {daily_breakdown['2025-08-06']} –∫–ª–∏–∫–æ–≤ üÜï")
        
        # –ó–ê–ü–†–û–° 2: –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–ª–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        print(f"\nüî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print("-" * 40)
        
        all_clicks_params = {
            'metrics': ['clicks', 'global_unique_clicks'],
            'columns': ['sub_id_4'],
            'filters': [
                {
                    'name': 'datetime',
                    'operator': 'BETWEEN',
                    'expression': [start_date, end_date]
                },
                {
                    'name': 'sub_id_4',
                    'operator': 'EQUALS',
                    'expression': 'tr32'
                },
                {
                    'name': 'ts_id',
                    'operator': 'IN_LIST',
                    'expression': non_google_ids
                }
            ],
            'grouping': ['sub_id_4'],
            'limit': 1000
        }
        
        all_clicks_data = await client._make_request('/admin_api/v1/report/build', method='POST', json=all_clicks_params)
        
        if all_clicks_data and 'rows' in all_clicks_data and len(all_clicks_data['rows']) > 0:
            row = all_clicks_data['rows'][0]
            total_all_clicks = row.get('clicks', 0)
            unique_clicks = row.get('global_unique_clicks', 0)
            print(f"–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤ TR32 –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_all_clicks}")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤: {unique_clicks}")
            print(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–æ—á–∞—Å–æ–≤–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π: {total_clicks == total_all_clicks} {'‚úÖ' if total_clicks == total_all_clicks else '‚ùå'}")

if __name__ == "__main__":
    asyncio.run(analyze_tr32_clicks())