#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ–± –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Keitaro API
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–ñ–ù–û–°–¢–¨: reg2dep –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–¥–æ–≤
"""

import asyncio
import sys
from pathlib import Path
import pandas as pd
from collections import defaultdict, Counter

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from integrations.keitaro.client import KeitaroClient

async def test_api_aggregation_hypothesis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É —á—Ç–æ API –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    
    print("üß™ –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ –û–ë –ê–ì–†–ï–ì–ê–¶–ò–ò –î–ê–ù–ù–´–• –í API")
    print("=" * 70)
    
    # 1. –ê–Ω–∞–ª–∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("üìä –ê–ù–ê–õ–ò–ó CSV –ù–ê –ü–†–ï–î–ú–ï–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í:")
    
    try:
        conversions_df = pd.read_csv("n1 conversions 050825.csv", sep=";", encoding='utf-8')
        n1_conversions = conversions_df[conversions_df['Sub ID 1'] == 'n1']
        csv_leads = n1_conversions[n1_conversions['–°—Ç–∞—Ç—É—Å'] == 'lead']
        
        print(f"   CSV –≤—Å–µ–≥–æ –ª–∏–¥–æ–≤: {len(csv_leads)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ External ID
        external_ids = csv_leads['External ID'].values
        external_id_counts = Counter(external_ids)
        duplicates = {ext_id: count for ext_id, count in external_id_counts.items() if count > 1}
        
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö External ID –≤ CSV: {len(external_id_counts)}")
        print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ External ID –≤ CSV: {len(duplicates)}")
        
        if duplicates:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ CSV:")
            for ext_id, count in list(duplicates.items())[:3]:
                print(f"     {ext_id}: {count} —Ä–∞–∑")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                dup_records = csv_leads[csv_leads['External ID'] == ext_id]
                for _, record in dup_records.iterrows():
                    print(f"       {record['–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏']} | {record['Sub ID 2']}")
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤
        unique_csv_leads = len(external_id_counts)
        print(f"   üí° –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ CSV: {unique_csv_leads} –ª–∏–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ CSV: {e}")
        return
    
    # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ API –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüåê –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó API –î–ê–ù–ù–´–•:")
    
    try:
        async with KeitaroClient() as keitaro:
            
            params = {
                "range": {
                    "from": "2025-08-05 00:00:00",
                    "to": "2025-08-05 23:59:59",
                    "timezone": "Europe/Moscow"
                }
            }
            
            data = await keitaro._make_request('/admin_api/v1/report/build', params, method="POST")
            rows = data.get('rows', [])
            n1_rows = [row for row in rows if row.get('sub_id_1') == 'n1']
            
            print(f"   API –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π n1: {len(n1_rows)}")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π —Å –ª–∏–¥–∞–º–∏
            lead_rows = [row for row in n1_rows if int(row.get('leads', 0)) > 0]
            print(f"   API –∑–∞–ø–∏—Å–µ–π —Å –ª–∏–¥–∞–º–∏: {len(lead_rows)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ external_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            external_id_groups = defaultdict(list)
            for row in n1_rows:
                ext_id = row.get('external_id', '')
                if ext_id:
                    external_id_groups[ext_id].append(row)
            
            print(f"   API —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö External ID: {len(external_id_groups)}")
            
            # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ API
            api_duplicates = {ext_id: rows for ext_id, rows in external_id_groups.items() if len(rows) > 1}
            print(f"   API –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ External ID: {len(api_duplicates)}")
            
            if api_duplicates:
                print(f"   –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ API:")
                for ext_id, duplicate_rows in list(api_duplicates.items())[:3]:
                    print(f"     {ext_id}: {len(duplicate_rows)} –∑–∞–ø–∏—Å–µ–π")
                    
                    total_leads = sum(int(row.get('leads', 0)) for row in duplicate_rows)
                    total_clicks = sum(int(row.get('clicks', 0)) for row in duplicate_rows)
                    
                    print(f"       –°—É–º–º–∞—Ä–Ω–æ –ª–∏–¥–æ–≤: {total_leads}")
                    print(f"       –°—É–º–º–∞—Ä–Ω–æ –∫–ª–∏–∫–æ–≤: {total_clicks}")
                    
                    for i, row in enumerate(duplicate_rows[:2]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2
                        print(f"       #{i+1}: {row.get('datetime')} | leads={row.get('leads')} | clicks={row.get('clicks')}")
            
            # 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ö–∞–∫ API –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
            print(f"\nüî¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í:")
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è leads (—Ç–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥)
            api_leads_sum = sum(int(row.get('leads', 0)) for row in n1_rows)
            
            # –ú–µ—Ç–æ–¥ 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ external_id –∏ –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º leads –Ω–∞ –∫–∞–∂–¥—ã–π ID
            api_leads_max_per_id = 0
            for ext_id, group_rows in external_id_groups.items():
                max_leads_for_id = max(int(row.get('leads', 0)) for row in group_rows)
                api_leads_max_per_id += max_leads_for_id
            
            # –ú–µ—Ç–æ–¥ 3: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ external_id –∏ —Å—É–º–º–∏—Ä—É–µ–º leads –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID
            api_leads_sum_per_id = 0
            for ext_id, group_rows in external_id_groups.items():
                sum_leads_for_id = sum(int(row.get('leads', 0)) for row in group_rows)
                api_leads_sum_per_id += sum_leads_for_id
            
            # –ú–µ—Ç–æ–¥ 4: –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º external_id + datetime
            unique_combinations = set()
            api_leads_unique_combo = 0
            
            for row in n1_rows:
                ext_id = row.get('external_id', '')
                datetime_val = row.get('datetime', '')
                combo_key = f"{ext_id}_{datetime_val}"
                
                if combo_key not in unique_combinations:
                    unique_combinations.add(combo_key)
                    api_leads_unique_combo += int(row.get('leads', 0))
            
            print(f"   –ú–µ—Ç–æ–¥ 1 (–ø—Ä–æ—Å—Ç–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ): {api_leads_sum} –ª–∏–¥–æ–≤")
            print(f"   –ú–µ—Ç–æ–¥ 2 (max –ø–æ external_id): {api_leads_max_per_id} –ª–∏–¥–æ–≤")  
            print(f"   –ú–µ—Ç–æ–¥ 3 (—Å—É–º–º–∞ –ø–æ external_id): {api_leads_sum_per_id} –ª–∏–¥–æ–≤")
            print(f"   –ú–µ—Ç–æ–¥ 4 (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ external_id+datetime): {api_leads_unique_combo} –ª–∏–¥–æ–≤")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
            csv_target = 329  # –ò–∑ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
            print(f"\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –° CSV –≠–¢–ê–õ–û–ù–û–ú ({csv_target} –ª–∏–¥–æ–≤):")
            
            methods = [
                ("–ü—Ä–æ—Å—Ç–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", api_leads_sum),
                ("Max –ø–æ external_id", api_leads_max_per_id),
                ("–°—É–º–º–∞ –ø–æ external_id", api_leads_sum_per_id), 
                ("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", api_leads_unique_combo)
            ]
            
            best_method = None
            best_diff = float('inf')
            
            for method_name, result in methods:
                diff = abs(result - csv_target)
                percentage = (result / csv_target) * 100
                
                if diff < best_diff:
                    best_diff = diff
                    best_method = method_name
                
                status = "‚úÖ" if diff == 0 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
                print(f"   {status} {method_name}: {result} ({percentage:.1f}% –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞, —Ä–∞–∑–Ω–∏—Ü–∞: {diff})")
            
            print(f"\nüèÜ –õ–£–ß–®–ò–ô –ú–ï–¢–û–î: {best_method} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {best_diff})")
            
            # 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö external_id
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• EXTERNAL_ID:")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ID –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            csv_all_ext_ids = set(conversions_df[conversions_df['Sub ID 1'] == 'n1']['External ID'].dropna().values)
            api_all_ext_ids = set(row.get('external_id', '') for row in n1_rows if row.get('external_id'))
            
            missing_in_api = csv_all_ext_ids - api_all_ext_ids
            print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ API: {len(missing_in_api)} external_id")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∏ ID –≤ —Å—ã—Ä–æ–º API –æ—Ç–≤–µ—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—è–º–∏)
            print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å—ã—Ä–æ–º API –æ—Ç–≤–µ—Ç–µ...")
            
            found_with_different_fields = 0
            missing_examples = []
            
            for missing_id in list(missing_in_api)[:5]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 5
                # –ò—â–µ–º —ç—Ç–æ—Ç ID –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö API (–Ω–µ —Ç–æ–ª—å–∫–æ n1)
                found_records = [row for row in rows if row.get('external_id') == missing_id]
                
                if found_records:
                    found_with_different_fields += 1
                    print(f"     ‚úÖ {missing_id} –Ω–∞–π–¥–µ–Ω –≤ API:")
                    for record in found_records[:2]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2
                        print(f"       sub_id_1={record.get('sub_id_1')} | leads={record.get('leads')} | conversions={record.get('conversions')}")
                        missing_examples.append({
                            'external_id': missing_id,
                            'sub_id_1': record.get('sub_id_1'),
                            'leads': record.get('leads'),
                            'reason': 'different_sub_id_1' if record.get('sub_id_1') != 'n1' else 'no_leads'
                        })
                else:
                    print(f"     ‚ùå {missing_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API")
                    missing_examples.append({
                        'external_id': missing_id,
                        'reason': 'not_in_api_at_all'
                    })
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—è–º–∏: {found_with_different_fields}/{len(list(missing_in_api)[:5])}")
            
            # 5. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
            print(f"\nüìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
            
            if best_diff == 0:
                print(f"   üéØ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –ú–µ—Ç–æ–¥ '{best_method}' –¥–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ")
                print(f"   üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥")
            elif best_diff < 10:
                print(f"   ‚ö†Ô∏è –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ '{best_method}' –ø–æ—á—Ç–∏ —Ç–æ—á–µ–Ω (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {best_diff})")
                print(f"   üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞")
            else:
                print(f"   ‚ùå –ê–ì–†–ï–ì–ê–¶–ò–Ø –ù–ï –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£")
                print(f"   üí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                print(f"     - API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
                print(f"     - –†–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: API vs Database")
                print(f"     - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ Keitaro")
                print(f"     - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ç–æ—á–Ω–æ")
            
            return {
                'best_method': best_method,
                'best_result': methods[[m[0] for m in methods].index(best_method)][1],
                'best_diff': best_diff,
                'csv_target': csv_target
            }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

async def suggest_keitaro_client_fix(analysis_result):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ KeitaroClient –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    if not analysis_result:
        return
    
    print(f"\nüîß –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï KEITAROCLIENT:")
    print("=" * 60)
    
    if analysis_result['best_diff'] == 0:
        print(f"üéØ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥: {analysis_result['best_method']}")
        
        print(f"\nüìù –ö–û–î –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print(f"–í —Ñ–∞–π–ª–µ src/integrations/keitaro/client.py")
        print(f"–í –º–µ—Ç–æ–¥–µ get_stats_by_buyers(), –∑–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–¥–æ–≤:")
        
        if analysis_result['best_method'] == 'Max –ø–æ external_id':
            print(f"""
# –í–ú–ï–°–¢–û:
stats['leads'] += int(row.get('leads', 0))

# –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ external_id –∏ –≤–∑—è—Ç–∏–µ –º–∞–∫—Å–∏–º—É–º–∞
external_id_groups = defaultdict(list)
for row in rows:
    ext_id = row.get('external_id', '')
    if ext_id:
        external_id_groups[ext_id].append(row)

for buyer, stats in buyer_stats.items():
    leads_total = 0
    for ext_id, group_rows in external_id_groups.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —ç—Ç–æ–º—É buyer
        buyer_rows = [r for r in group_rows if r.get('sub_id_1') == buyer]
        if buyer_rows:
            max_leads = max(int(r.get('leads', 0)) for r in buyer_rows)
            leads_total += max_leads
    stats['leads'] = leads_total
""")
        
        elif analysis_result['best_method'] == '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏':
            print(f"""
# –í–ú–ï–°–¢–û:
stats['leads'] += int(row.get('leads', 0))

# –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
# –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ external_id + datetime
unique_combinations = set()
for row in rows:
    buyer = row.get('sub_id_1', '')
    if buyer in buyer_stats:
        ext_id = row.get('external_id', '')
        datetime_val = row.get('datetime', '')
        combo_key = f"{{ext_id}}_{{datetime_val}}"
        
        if combo_key not in unique_combinations:
            unique_combinations.add(combo_key)
            buyer_stats[buyer]['leads'] += int(row.get('leads', 0))
""")
        
        print(f"\n‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {analysis_result['best_result']} –ª–∏–¥–æ–≤ –≤–º–µ—Å—Ç–æ 283")
        print(f"‚úÖ –¢–û–ß–ù–û–°–¢–¨ reg2dep: 100%")
        
    elif analysis_result['best_diff'] < 10:
        print(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ: {analysis_result['best_method']}")
        print(f"üìä –£–ª—É—á—à–µ–Ω–∏–µ —Å 283 –¥–æ {analysis_result['best_result']} –ª–∏–¥–æ–≤")
        print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å reg2dep: {(analysis_result['best_result']/analysis_result['csv_target']*100):.1f}%")
        
    else:
        print(f"‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ —Ä–µ—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É")
        print(f"üîç –ù—É–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üíé –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–¥–æ–≤ –¥–ª—è reg2dep")
    
    result = await test_api_aggregation_hypothesis()
    await suggest_keitaro_client_fix(result)
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"reg2dep –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –±–∏–∑–Ω–µ—Å–∞")
    print(f"–ë–µ–∑ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–¥–æ–≤ —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")
    print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ 329 –ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ API")

if __name__ == "__main__":
    asyncio.run(main())