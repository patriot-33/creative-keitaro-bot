#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö —Å CSV
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
"""

import asyncio
import sys
from pathlib import Path
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from integrations.keitaro.client import KeitaroClient

async def deep_comparison_api_vs_csv():
    """–ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ API –∏ CSV –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üî¨ –ì–õ–£–ë–û–ö–û–ï –°–†–ê–í–ù–ï–ù–ò–ï API VS CSV")
    print("=" * 60)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    print("üìä –ê–ù–ê–õ–ò–ó CSV –î–ê–ù–ù–´–•:")
    
    try:
        # –ö–ª–∏–∫–∏
        clicks_df = pd.read_csv("n1 clicks yesterday.csv", sep=";", encoding='utf-8')
        n1_clicks = clicks_df[clicks_df['Sub ID 1'] == 'n1']
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversions_df = pd.read_csv("n1 conversions 050825.csv", sep=";", encoding='utf-8')
        n1_conversions = conversions_df[conversions_df['Sub ID 1'] == 'n1']
        
        print(f"   CSV –ö–ª–∏–∫–∏ n1: {len(n1_clicks)}")
        print(f"   CSV –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ n1: {len(n1_conversions)}")
        
        # –ê–Ω–∞–ª–∏–∑ external_id –≤ CSV
        csv_external_ids = set(n1_conversions['External ID'].dropna().values)
        print(f"   CSV –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ External ID: {len(csv_external_ids)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –≤ CSV
        csv_leads = len(n1_conversions[n1_conversions['–°—Ç–∞—Ç—É—Å'] == 'lead'])
        csv_sales = len(n1_conversions[n1_conversions['–°—Ç–∞—Ç—É—Å'] == 'sale'])
        
        print(f"   CSV –õ–∏–¥—ã: {csv_leads}")
        print(f"   CSV –ü—Ä–æ–¥–∞–∂–∏: {csv_sales}")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ CSV
        n1_conversions['–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'] = pd.to_datetime(n1_conversions['–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'])
        csv_min_time = n1_conversions['–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'].min()
        csv_max_time = n1_conversions['–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'].max()
        
        print(f"   CSV –í—Ä–µ–º—è –æ—Ç: {csv_min_time}")
        print(f"   CSV –í—Ä–µ–º—è –¥–æ: {csv_max_time}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        return
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    print(f"\nüåê –ê–ù–ê–õ–ò–ó API –î–ê–ù–ù–´–•:")
    
    try:
        async with KeitaroClient() as keitaro:
            
            # –¢–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ —á—Ç–æ –∏ CSV
            params = {
                "range": {
                    "from": "2025-08-05 00:00:00",
                    "to": "2025-08-05 23:59:59",
                    "timezone": "Europe/Moscow"
                }
            }
            
            data = await keitaro._make_request('/admin_api/v1/report/build', params, method="POST")
            rows = data.get('rows', [])
            
            print(f"   API –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ n1
            n1_rows = [row for row in rows if row.get('sub_id_1') == 'n1']
            print(f"   API –ó–∞–ø–∏—Å–µ–π n1: {len(n1_rows)}")
            
            # –ê–Ω–∞–ª–∏–∑ external_id –≤ API
            api_external_ids = set()
            for row in n1_rows:
                ext_id = row.get('external_id')
                if ext_id and ext_id.strip():
                    api_external_ids.add(ext_id)
            
            print(f"   API –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ External ID: {len(api_external_ids)}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ external_id
            common_ids = csv_external_ids & api_external_ids
            csv_only_ids = csv_external_ids - api_external_ids
            api_only_ids = api_external_ids - csv_external_ids
            
            print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï EXTERNAL_ID:")
            print(f"   –û–±—â–∏–µ ID: {len(common_ids)}")
            print(f"   –¢–æ–ª—å–∫–æ –≤ CSV: {len(csv_only_ids)}")
            print(f"   –¢–æ–ª—å–∫–æ –≤ API: {len(api_only_ids)}")
            
            if len(csv_only_ids) > 0:
                print(f"   –ü—Ä–∏–º–µ—Ä—ã ID —Ç–æ–ª—å–∫–æ –≤ CSV:")
                for ext_id in list(csv_only_ids)[:5]:
                    print(f"     {ext_id}")
            
            if len(api_only_ids) > 0:
                print(f"   –ü—Ä–∏–º–µ—Ä—ã ID —Ç–æ–ª—å–∫–æ –≤ API:")
                for ext_id in list(api_only_ids)[:5]:
                    print(f"     {ext_id}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –ø–æ–¥—Å—á–µ—Ç–∞
            print(f"\nüßÆ –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –ü–û–î–°–ß–ï–¢–ê:")
            
            # –ú–µ—Ç–æ–¥ 1: –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π leads/sales –∏–∑ API
            api_leads_sum = sum(int(row.get('leads', 0)) for row in n1_rows)
            api_sales_sum = sum(int(row.get('sales', 0)) for row in n1_rows)
            
            print(f"   API –ú–µ—Ç–æ–¥ 1 (—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π):")
            print(f"     –õ–∏–¥—ã: {api_leads_sum}")
            print(f"     –ü—Ä–æ–¥–∞–∂–∏: {api_sales_sum}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å leads > 0
            api_leads_count = len([row for row in n1_rows if int(row.get('leads', 0)) > 0])
            api_sales_count = len([row for row in n1_rows if int(row.get('sales', 0)) > 0])
            
            print(f"   API –ú–µ—Ç–æ–¥ 2 (–ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å leads > 0):")
            print(f"     –ó–∞–ø–∏—Å–µ–π —Å –ª–∏–¥–∞–º–∏: {api_leads_count}")
            print(f"     –ó–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {api_sales_count}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–¥—Å—á–µ—Ç –ø–æ external_id —Å –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏
            api_external_with_leads = set()
            api_external_with_sales = set()
            
            for row in n1_rows:
                ext_id = row.get('external_id')
                if ext_id and int(row.get('leads', 0)) > 0:
                    api_external_with_leads.add(ext_id)
                if ext_id and int(row.get('sales', 0)) > 0:
                    api_external_with_sales.add(ext_id)
            
            print(f"   API –ú–µ—Ç–æ–¥ 3 (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ external_id —Å –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏):")
            print(f"     External ID —Å –ª–∏–¥–∞–º–∏: {len(api_external_with_leads)}")
            print(f"     External ID —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {len(api_external_with_sales)}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å CSV
            print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° CSV –≠–¢–ê–õ–û–ù–û–ú:")
            
            methods = [
                ("–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π", api_leads_sum, api_sales_sum),
                ("–ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π", api_leads_count, api_sales_count),
                ("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ External ID", len(api_external_with_leads), len(api_external_with_sales))
            ]
            
            print(f"{'–ú–µ—Ç–æ–¥':<25} | {'–õ–∏–¥—ã':<8} | {'–ü—Ä–æ–¥–∞–∂–∏':<8} | {'–õ–∏–¥—ã ‚úì':<8} | {'–ü—Ä–æ–¥–∞–∂–∏ ‚úì'}")
            print(f"{'-'*25} | {'-'*8} | {'-'*8} | {'-'*8} | {'-'*9}")
            print(f"{'CSV —ç—Ç–∞–ª–æ–Ω':<25} | {csv_leads:<8} | {csv_sales:<8} | {'‚úì':<8} | {'‚úì'}")
            print(f"{'-'*25} | {'-'*8} | {'-'*8} | {'-'*8} | {'-'*9}")
            
            best_leads_method = None
            best_sales_method = None
            
            for method_name, api_leads, api_sales in methods:
                leads_match = api_leads == csv_leads
                sales_match = api_sales == csv_sales
                
                if leads_match:
                    best_leads_method = method_name
                if sales_match:
                    best_sales_method = method_name
                
                print(f"{method_name:<25} | {api_leads:<8} | {api_sales:<8} | {'‚úÖ' if leads_match else '‚ùå':<8} | {'‚úÖ' if sales_match else '‚ùå'}")
            
            # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ API —Å –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏, –Ω–æ –±–µ–∑ external_id
            no_ext_id_but_has_conv = [
                row for row in n1_rows 
                if (not row.get('external_id') or not row.get('external_id').strip()) 
                and (int(row.get('leads', 0)) > 0 or int(row.get('sales', 0)) > 0)
            ]
            
            if no_ext_id_but_has_conv:
                print(f"   –ó–∞–ø–∏—Å–∏ –±–µ–∑ external_id, –Ω–æ —Å –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏: {len(no_ext_id_but_has_conv)}")
                leads_without_ext_id = sum(int(row.get('leads', 0)) for row in no_ext_id_but_has_conv)
                sales_without_ext_id = sum(int(row.get('sales', 0)) for row in no_ext_id_but_has_conv)
                print(f"     –õ–∏–¥—ã –±–µ–∑ external_id: {leads_without_ext_id}")
                print(f"     –ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ external_id: {sales_without_ext_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –≤ API
            api_conv_times = []
            for row in n1_rows:
                if int(row.get('conversions', 0)) > 0 and row.get('datetime'):
                    api_conv_times.append(row['datetime'])
            
            if api_conv_times:
                api_min_conv_time = min(api_conv_times)
                api_max_conv_time = max(api_conv_times)
                print(f"   API –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º—è –æ—Ç: {api_min_conv_time}")
                print(f"   API –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º—è –¥–æ: {api_max_conv_time}")
            
            # 6. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
            print(f"\nüìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
            
            if best_leads_method and best_sales_method:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞:")
                print(f"     –õ–∏–¥—ã: {best_leads_method}")
                print(f"     –ü—Ä–æ–¥–∞–∂–∏: {best_sales_method}")
            elif best_leads_method or best_sales_method:
                print(f"   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
                if best_leads_method:
                    print(f"     –õ–∏–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø—Ä–∏ –º–µ—Ç–æ–¥–µ: {best_leads_method}")
                if best_sales_method:
                    print(f"     –ü—Ä–æ–¥–∞–∂–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø—Ä–∏ –º–µ—Ç–æ–¥–µ: {best_sales_method}")
            else:
                print(f"   ‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ –¥–∞–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
                print(f"   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print(f"     - –†–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (API vs Database)")
                print(f"     - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API")
                print(f"     - –†–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π")
                print(f"     - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ API")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            
            if len(csv_only_ids) > len(api_only_ids):
                print(f"   üìù –í CSV –±–æ–ª—å—à–µ external_id —á–µ–º –≤ API")
                print(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
                print(f"   üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã API –∑–∞–ø—Ä–æ—Å–∞")
            
            elif len(api_only_ids) > len(csv_only_ids):
                print(f"   üìù –í API –±–æ–ª—å—à–µ external_id —á–µ–º –≤ CSV")
                print(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ –≤ API –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print(f"   üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV")
            
            print(f"   üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å API:")
            accuracy_leads = (min(api_leads_sum, csv_leads) / max(api_leads_sum, csv_leads)) * 100
            accuracy_sales = (min(api_sales_sum, csv_sales) / max(api_sales_sum, csv_sales)) * 100 if csv_sales > 0 else 100
            print(f"     –õ–∏–¥—ã: {accuracy_leads:.1f}%")
            print(f"     –ü—Ä–æ–¥–∞–∂–∏: {accuracy_sales:.1f}%")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    await deep_comparison_api_vs_csv()

if __name__ == "__main__":
    asyncio.run(main())